-- VHDL Entity ece411.L2_TrueLRU.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:58 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2_TrueLRU IS
   PORT( 
      Index   : IN     LC3b_c_index;
      RESET_L : IN     std_logic;
      clk     : IN     std_logic;
      hit0    : IN     std_logic;
      hit1    : IN     std_logic;
      hit2    : IN     std_logic;
      hit3    : IN     std_logic;
      hit4    : IN     std_logic;
      hit5    : IN     std_logic;
      hit6    : IN     std_logic;
      hit7    : IN     std_logic;
      load    : IN     std_logic;
      lru0    : OUT    std_logic;
      lru1    : OUT    std_logic;
      lru2    : OUT    std_logic;
      lru3    : OUT    std_logic;
      lru4    : OUT    std_logic;
      lru5    : OUT    std_logic;
      lru6    : OUT    std_logic;
      lru7    : OUT    std_logic
   );

-- Declarations

END L2_TrueLRU ;

--
-- VHDL Architecture ece411.L2_TrueLRU.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:58 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_arith.all;
USE ieee.NUMERIC_STD.all;
LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF L2_TrueLRU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL LRU     : LC3b_byte;
   SIGNAL MRU     : LC3b_byte;
   SIGNAL eq0     : std_logic;
   SIGNAL eq1     : std_logic;
   SIGNAL eq2     : std_logic;
   SIGNAL eq3     : std_logic;
   SIGNAL eq4     : std_logic;
   SIGNAL eq5     : std_logic;
   SIGNAL eq6     : std_logic;
   SIGNAL eq7     : std_logic;
   SIGNAL h0      : std_logic;
   SIGNAL h1      : std_logic;
   SIGNAL h2      : std_logic;
   SIGNAL h3      : std_logic;
   SIGNAL h4      : std_logic;
   SIGNAL h5      : std_logic;
   SIGNAL h6      : std_logic;
   SIGNAL h7      : std_logic;
   SIGNAL hit     : LC3b_byte;
   SIGNAL init0   : LC3b_byte;
   SIGNAL init1   : LC3b_byte;
   SIGNAL init2   : LC3b_BYTE;
   SIGNAL init3   : LC3b_BYTE;
   SIGNAL init4   : LC3b_BYTE;
   SIGNAL init5   : LC3b_BYTE;
   SIGNAL init6   : LC3b_BYTE;
   SIGNAL init7   : LC3b_BYTE;
   SIGNAL load1   : std_logic;
   SIGNAL load2   : std_logic;
   SIGNAL load3   : std_logic;
   SIGNAL load4   : std_logic;
   SIGNAL load5   : std_logic;
   SIGNAL load6   : std_logic;
   SIGNAL load7   : std_logic;
   SIGNAL output  : LC3b_byte;
   SIGNAL output1 : LC3b_byte;
   SIGNAL output2 : LC3b_byte;
   SIGNAL output3 : LC3b_byte;
   SIGNAL output4 : LC3b_byte;
   SIGNAL output5 : LC3b_byte;
   SIGNAL output6 : LC3b_byte;
   SIGNAL output7 : LC3b_8mux_sel;


   -- Component Declarations
   COMPONENT BitAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitOR2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ByteArray
   PORT (
      RESET_L : IN     std_logic ;
      Clk     : IN     std_logic ;
      Load    : IN     std_logic ;
      Index   : IN     LC3b_c_index ;
      Init    : IN     LC3b_byte ;
      Input   : IN     LC3b_byte ;
      Output  : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT ByteMux8
   PORT (
      I0  : IN     LC3b_byte ;
      I1  : IN     LC3b_byte ;
      I2  : IN     LC3b_byte ;
      I3  : IN     LC3b_byte ;
      I4  : IN     LC3b_byte ;
      I5  : IN     LC3b_byte ;
      I6  : IN     LC3b_byte ;
      I7  : IN     LC3b_byte ;
      Sel : IN     LC3b_8mux_sel ;
      O   : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT ByteSplit
   PORT (
      Input : IN     LC3b_byte ;
      Out0  : OUT    std_logic ;
      Out1  : OUT    std_logic ;
      Out2  : OUT    std_logic ;
      Out3  : OUT    std_logic ;
      Out4  : OUT    std_logic ;
      Out5  : OUT    std_logic ;
      Out6  : OUT    std_logic ;
      Out7  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Comp8
   PORT (
      In1 : IN     LC3b_byte ;
      In2 : IN     LC3b_byte ;
      eq  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT cat8b
   PORT (
      b1  : IN     std_logic ;
      b0  : IN     std_logic ;
      b2  : IN     std_logic ;
      b3  : IN     std_logic ;
      b4  : IN     std_logic ;
      b5  : IN     std_logic ;
      b6  : IN     std_logic ;
      b7  : IN     std_logic ;
      c8b : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT encoder_8to3
   PORT (
      I0     : IN     std_logic ;
      I1     : IN     std_logic ;
      I2     : IN     std_logic ;
      I3     : IN     std_logic ;
      I4     : IN     std_logic ;
      I5     : IN     std_logic ;
      I6     : IN     std_logic ;
      I7     : IN     std_logic ;
      output : OUT    LC3b_8mux_sel 
   );
   END COMPONENT;
   COMPONENT iconst1
   PORT (
      init0 : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT iconst128
   PORT (
      init7 : OUT    LC3b_BYTE 
   );
   END COMPONENT;
   COMPONENT iconst16
   PORT (
      init4 : OUT    LC3b_BYTE 
   );
   END COMPONENT;
   COMPONENT iconst2
   PORT (
      init1 : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT iconst32
   PORT (
      init5 : OUT    LC3b_BYTE 
   );
   END COMPONENT;
   COMPONENT iconst4
   PORT (
      init2 : OUT    LC3b_BYTE 
   );
   END COMPONENT;
   COMPONENT iconst64
   PORT (
      init6 : OUT    LC3b_BYTE 
   );
   END COMPONENT;
   COMPONENT iconst8
   PORT (
      init3 : OUT    LC3b_BYTE 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BitAND2 USE ENTITY ece411.BitAND2;
   FOR ALL : BitOR2 USE ENTITY ece411.BitOR2;
   FOR ALL : ByteArray USE ENTITY ece411.ByteArray;
   FOR ALL : ByteMux8 USE ENTITY ece411.ByteMux8;
   FOR ALL : ByteSplit USE ENTITY ece411.ByteSplit;
   FOR ALL : Comp8 USE ENTITY ece411.Comp8;
   FOR ALL : cat8b USE ENTITY ece411.cat8b;
   FOR ALL : encoder_8to3 USE ENTITY ece411.encoder_8to3;
   FOR ALL : iconst1 USE ENTITY ece411.iconst1;
   FOR ALL : iconst128 USE ENTITY ece411.iconst128;
   FOR ALL : iconst16 USE ENTITY ece411.iconst16;
   FOR ALL : iconst2 USE ENTITY ece411.iconst2;
   FOR ALL : iconst32 USE ENTITY ece411.iconst32;
   FOR ALL : iconst4 USE ENTITY ece411.iconst4;
   FOR ALL : iconst64 USE ENTITY ece411.iconst64;
   FOR ALL : iconst8 USE ENTITY ece411.iconst8;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   U_18 : BitAND2
      PORT MAP (
         I0 => eq0,
         I1 => load,
         O  => h0
      );
   U_19 : BitAND2
      PORT MAP (
         I0 => eq1,
         I1 => load,
         O  => h1
      );
   U_20 : BitAND2
      PORT MAP (
         I0 => eq2,
         I1 => load,
         O  => h2
      );
   U_21 : BitAND2
      PORT MAP (
         I0 => eq3,
         I1 => load,
         O  => h3
      );
   U_22 : BitAND2
      PORT MAP (
         I0 => eq4,
         I1 => load,
         O  => h4
      );
   U_23 : BitAND2
      PORT MAP (
         I0 => eq5,
         I1 => load,
         O  => h5
      );
   U_24 : BitAND2
      PORT MAP (
         I0 => eq6,
         I1 => load,
         O  => h6
      );
   U_25 : BitAND2
      PORT MAP (
         I0 => eq7,
         I1 => load,
         O  => h7
      );
   U_0 : BitOR2
      PORT MAP (
         I0 => load6,
         I1 => h7,
         O  => load7
      );
   U_1 : BitOR2
      PORT MAP (
         I0 => load5,
         I1 => h6,
         O  => load6
      );
   U_2 : BitOR2
      PORT MAP (
         I0 => load4,
         I1 => h5,
         O  => load5
      );
   U_3 : BitOR2
      PORT MAP (
         I0 => load1,
         I1 => h2,
         O  => load2
      );
   U_4 : BitOR2
      PORT MAP (
         I0 => load2,
         I1 => h3,
         O  => load3
      );
   U_5 : BitOR2
      PORT MAP (
         I0 => load3,
         I1 => h4,
         O  => load4
      );
   U_7 : BitOR2
      PORT MAP (
         I0 => h0,
         I1 => h1,
         O  => load1
      );
   U0 : ByteArray
      PORT MAP (
         RESET_L => RESET_L,
         Clk     => clk,
         Load    => h0,
         Index   => Index,
         Init    => init0,
         Input   => output6,
         Output  => LRU
      );
   U1 : ByteArray
      PORT MAP (
         RESET_L => RESET_L,
         Clk     => clk,
         Load    => load1,
         Index   => Index,
         Init    => init1,
         Input   => output5,
         Output  => output6
      );
   U2 : ByteArray
      PORT MAP (
         RESET_L => RESET_L,
         Clk     => clk,
         Load    => load2,
         Index   => Index,
         Init    => init2,
         Input   => output4,
         Output  => output5
      );
   U3 : ByteArray
      PORT MAP (
         RESET_L => RESET_L,
         Clk     => clk,
         Load    => load3,
         Index   => Index,
         Init    => init3,
         Input   => output3,
         Output  => output4
      );
   U4 : ByteArray
      PORT MAP (
         RESET_L => RESET_L,
         Clk     => clk,
         Load    => load4,
         Index   => Index,
         Init    => init4,
         Input   => output2,
         Output  => output3
      );
   U5 : ByteArray
      PORT MAP (
         RESET_L => RESET_L,
         Clk     => clk,
         Load    => load5,
         Index   => Index,
         Init    => init5,
         Input   => output1,
         Output  => output2
      );
   U6 : ByteArray
      PORT MAP (
         RESET_L => RESET_L,
         Clk     => clk,
         Load    => load6,
         Index   => Index,
         Init    => init6,
         Input   => output,
         Output  => output1
      );
   U7 : ByteArray
      PORT MAP (
         RESET_L => RESET_L,
         Clk     => clk,
         Load    => load7,
         Index   => Index,
         Init    => init7,
         Input   => MRU,
         Output  => output
      );
   U_6 : ByteMux8
      PORT MAP (
         I0  => LRU,
         I1  => output6,
         I2  => output5,
         I3  => output4,
         I4  => output3,
         I5  => output2,
         I6  => output1,
         I7  => output,
         Sel => output7,
         O   => MRU
      );
   BS : ByteSplit
      PORT MAP (
         Input => LRU,
         Out0  => lru0,
         Out1  => lru1,
         Out2  => lru2,
         Out3  => lru3,
         Out4  => lru4,
         Out5  => lru5,
         Out6  => lru6,
         Out7  => lru7
      );
   U_9 : Comp8
      PORT MAP (
         In1 => LRU,
         In2 => hit,
         eq  => eq0
      );
   U_10 : Comp8
      PORT MAP (
         In1 => output6,
         In2 => hit,
         eq  => eq1
      );
   U_11 : Comp8
      PORT MAP (
         In1 => output5,
         In2 => hit,
         eq  => eq2
      );
   U_12 : Comp8
      PORT MAP (
         In1 => output4,
         In2 => hit,
         eq  => eq3
      );
   U_13 : Comp8
      PORT MAP (
         In1 => output3,
         In2 => hit,
         eq  => eq4
      );
   U_14 : Comp8
      PORT MAP (
         In1 => output2,
         In2 => hit,
         eq  => eq5
      );
   U_15 : Comp8
      PORT MAP (
         In1 => output1,
         In2 => hit,
         eq  => eq6
      );
   U_16 : Comp8
      PORT MAP (
         In1 => output,
         In2 => hit,
         eq  => eq7
      );
   U_8 : cat8b
      PORT MAP (
         b1  => hit1,
         b0  => hit0,
         b2  => hit2,
         b3  => hit3,
         b4  => hit4,
         b5  => hit5,
         b6  => hit6,
         b7  => hit7,
         c8b => hit
      );
   U_17 : encoder_8to3
      PORT MAP (
         I0     => eq0,
         I1     => eq1,
         I2     => eq2,
         I3     => eq3,
         I4     => eq4,
         I5     => eq5,
         I6     => eq6,
         I7     => eq7,
         output => output7
      );
   i1 : iconst1
      PORT MAP (
         init0 => init0
      );
   i128 : iconst128
      PORT MAP (
         init7 => init7
      );
   i16 : iconst16
      PORT MAP (
         init4 => init4
      );
   i2 : iconst2
      PORT MAP (
         init1 => init1
      );
   i32 : iconst32
      PORT MAP (
         init5 => init5
      );
   i4 : iconst4
      PORT MAP (
         init2 => init2
      );
   i64 : iconst64
      PORT MAP (
         init6 => init6
      );
   i8 : iconst8
      PORT MAP (
         init3 => init3
      );

END struct;
