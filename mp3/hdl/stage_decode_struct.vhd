-- VHDL Entity ece411.STAGE_DECODE.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:56 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY STAGE_DECODE IS
   PORT( 
      IW            : IN     LC3b_word;
      PCPlus2out    : IN     LC3b_word;
      PCout         : IN     LC3b_word;
      RFInputMuxSel : IN     std_logic;
      WBMuxout      : IN     LC3b_word;
      WB_Dest       : IN     LC3b_reg;
      WB_LoadReg    : IN     std_logic;
      clk           : IN     std_logic;
      mispredict_l  : IN     std_logic;
      reset_l       : IN     std_logic;
      stallInd_L    : IN     std_logic;
      ALUA          : OUT    LC3b_word;
      ALUB          : OUT    LC3b_word;
      CW            : OUT    LC3b_ControlWord;
      DR            : OUT    LC3b_reg;
      ID_isBR       : OUT    std_logic;
      ID_isLD       : OUT    std_logic;
      ID_isST       : OUT    std_logic;
      IDaddNOPs     : OUT    std_logic;
      Ind_stall_L   : OUT    std_logic;
      PCAddout      : OUT    LC3b_word;
      RFB           : OUT    LC3b_word;
      RFInMuxout    : OUT    LC3b_word;
      SR1           : OUT    LC3b_reg;
      SR2           : OUT    LC3b_reg;
      enBubble      : OUT    std_logic
   );

-- Declarations

END STAGE_DECODE ;

--
-- VHDL Architecture ece411.STAGE_DECODE.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:57 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;

LIBRARY ece411;

ARCHITECTURE struct OF STAGE_DECODE IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ADJ11out    : LC3b_word;
   SIGNAL ADJ5out     : LC3b_word;
   SIGNAL ADJ6out     : LC3b_word;
   SIGNAL ADJ9out     : LC3b_word;
   SIGNAL Dest        : LC3b_reg;
   SIGNAL DestMuxSel  : std_logic;
   SIGNAL IR11        : std_logic;
   SIGNAL IR5         : std_logic;
   SIGNAL ImmMuxSel   : LC3b_4MUX_SEL;
   SIGNAL ImmMuxout   : LC3b_word;
   SIGNAL Opcode      : LC3b_opcode;
   SIGNAL PCAddMuxSel : std_logic;
   SIGNAL PCAddMuxout : LC3b_word;
   SIGNAL RFA         : LC3b_word;
   SIGNAL SEXT6out    : LC3b_word;
   SIGNAL SrcA        : LC3b_reg;
   SIGNAL SrcB        : LC3b_reg;
   SIGNAL SrcBMuxout  : LC3b_reg;
   SIGNAL StoreSR     : std_logic;
   SIGNAL ZEXT4out    : LC3b_word;
   SIGNAL hasSrcB     : std_logic;
   SIGNAL imm4        : LC3b_imm4;
   SIGNAL imm5        : LC3b_imm5;
   SIGNAL index6      : LC3b_index6;
   SIGNAL isLEA       : std_logic;
   SIGNAL nIR5        : std_logic;
   SIGNAL noSrcA      : std_logic;
   SIGNAL offset11    : LC3b_offset11;
   SIGNAL offset9     : LC3b_offset9;
   SIGNAL preCW       : LC3b_controlword;
   SIGNAL sub         : std_logic;
   SIGNAL useSrcB     : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL RFB_internal        : LC3b_word;
   SIGNAL PCAddout_internal   : LC3b_word;
   SIGNAL CW_internal         : LC3b_ControlWord;
   SIGNAL ID_isST_internal    : std_logic;
   SIGNAL RFInMuxout_internal : LC3b_word;


   -- Component Declarations
   COMPONENT ADJ11
   PORT (
      input : IN     LC3b_offset11 ;
      ADJ11 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ5
   PORT (
      input : IN     LC3b_imm5 ;
      ADJ5  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ6
   PORT (
      input : IN     LC3b_index6 ;
      ADJ6  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ADJ9
   PORT (
      input : IN     LC3b_offset9 ;
      ADJ9  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BitAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOT1
   PORT (
      I : IN     std_logic ;
      O : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT CWSplit
   PORT (
      CW              : IN     LC3b_ControlWord ;
      LoadPC          : OUT    std_logic ;
      LoadReg         : OUT    std_logic ;
      LoadNZP         : OUT    std_logic ;
      PCWriteback     : OUT    std_logic ;
      PCMuxSel        : OUT    std_logic ;
      PCAddMuxSel     : OUT    std_logic ;
      ExtPCMuxSel     : OUT    LC3b_4mux_sel ;
      DestMuxSel      : OUT    std_logic ;
      RFInputMuxSel   : OUT    std_logic ;
      StoreSR         : OUT    std_logic ;
      ImmMuxSel       : OUT    LC3b_4mux_sel ;
      ExMuxSel        : OUT    LC3b_4mux_sel ;
      AddrMuxSel      : OUT    std_logic ;
      DataMuxSel      : OUT    LC3b_4mux_sel ;
      ByteMuxSel      : OUT    std_logic ;
      WBMuxSel        : OUT    LC3b_4mux_sel ;
      ALUOp           : OUT    LC3b_ALUop ;
      MRead_l         : OUT    std_logic ;
      MWrite_l        : OUT    std_logic ;
      isBR            : OUT    std_logic ;
      isLD            : OUT    std_logic ;
      isST            : OUT    std_logic ;
      isInd           : OUT    std_logic ;
      isUnconditional : OUT    std_logic ;
      isIndirect      : OUT    std_logic ;
      isNormalBR      : OUT    std_logic ;
      isLEA           : OUT    std_logic ;
      noSrcA          : OUT    std_logic ;
      hasSrcB         : OUT    std_logic ;
      enBubble        : OUT    std_logic ;
      isIndLoad       : OUT    std_logic ;
      addNOPs         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Control_ROM
   PORT (
      Opcode      : IN     LC3b_opcode ;
      reset_l     : IN     std_logic ;
      ControlWord : OUT    LC3b_ControlWord 
   );
   END COMPONENT;
   COMPONENT IWRegSplitter
   PORT (
      Dest       : IN     LC3b_reg ;
      DestMuxSel : IN     std_logic ;
      SrcA       : IN     LC3b_reg ;
      SrcB       : IN     LC3b_reg ;
      isST       : IN     std_logic ;
      noSrcA     : IN     std_logic ;
      useSrcB    : IN     std_logic ;
      DR         : OUT    LC3b_reg ;
      SR1        : OUT    LC3b_reg ;
      SR2        : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT IWSplit
   PORT (
      IW       : IN     LC3b_word ;
      index6   : OUT    LC3b_index6 ;
      vect8    : OUT    LC3b_trapvect8 ;
      offset9  : OUT    LC3b_offset9 ;
      offset11 : OUT    LC3b_offset11 ;
      SrcA     : OUT    LC3b_reg ;
      SrcB     : OUT    LC3b_reg ;
      Opcode   : OUT    LC3b_opcode ;
      imm4     : OUT    LC3b_imm4 ;
      IR5      : OUT    std_logic ;
      IR11     : OUT    std_logic ;
      Shiftop  : OUT    LC3b_shiftop ;
      Dest     : OUT    LC3b_reg ;
      imm5     : OUT    LC3b_imm5 
   );
   END COMPONENT;
   COMPONENT IndirectSub
   PORT (
      CLK          : IN     STD_LOGIC ;
      CWin         : IN     LC3b_controlword ;
      RESET_L      : IN     STD_LOGIC ;
      mispredict_l : IN     std_logic ;
      stall_L      : IN     std_logic ;
      CWout        : OUT    LC3b_controlword ;
      sub          : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT PCAdd
   PORT (
      In1 : IN     LC3b_word ;
      In2 : IN     LC3b_word ;
      O   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegFile
   PORT (
      Dest     : IN     LC3b_reg ;
      reset_l  : IN     std_logic ;
      Input    : IN     LC3b_word ;
      RegWrite : IN     std_logic ;
      SrcB     : IN     LC3b_reg ;
      SrcA     : IN     LC3b_reg ;
      clk      : IN     std_logic ;
      RFA      : OUT    LC3b_word ;
      RFB      : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT RegMux2
   PORT (
      Sel : IN     std_logic ;
      A   : IN     LC3b_reg ;
      B   : IN     LC3b_reg ;
      F   : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT SEXT6
   PORT (
      input : IN     LC3b_index6 ;
      SEXT6 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT4
   PORT (
      ZEXT4 : OUT    LC3b_word ;
      input : IN     LC3b_imm4 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : ADJ11 USE ENTITY ece411.ADJ11;
   FOR ALL : ADJ5 USE ENTITY ece411.ADJ5;
   FOR ALL : ADJ6 USE ENTITY ece411.ADJ6;
   FOR ALL : ADJ9 USE ENTITY ece411.ADJ9;
   FOR ALL : BitAND2 USE ENTITY ece411.BitAND2;
   FOR ALL : BitNOT1 USE ENTITY ece411.BitNOT1;
   FOR ALL : CWSplit USE ENTITY ece411.CWSplit;
   FOR ALL : Control_ROM USE ENTITY ece411.Control_ROM;
   FOR ALL : IWRegSplitter USE ENTITY ece411.IWRegSplitter;
   FOR ALL : IWSplit USE ENTITY ece411.IWSplit;
   FOR ALL : IndirectSub USE ENTITY ece411.IndirectSub;
   FOR ALL : PCAdd USE ENTITY ece411.PCAdd;
   FOR ALL : RegFile USE ENTITY ece411.RegFile;
   FOR ALL : RegMux2 USE ENTITY ece411.RegMux2;
   FOR ALL : SEXT6 USE ENTITY ece411.SEXT6;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : ZEXT4 USE ENTITY ece411.ZEXT4;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   aADJ11 : ADJ11
      PORT MAP (
         input => offset11,
         ADJ11 => ADJ11out
      );
   aADJ5 : ADJ5
      PORT MAP (
         input => imm5,
         ADJ5  => ADJ5out
      );
   aADJ6 : ADJ6
      PORT MAP (
         input => index6,
         ADJ6  => ADJ6out
      );
   aADJ9 : ADJ9
      PORT MAP (
         input => offset9,
         ADJ9  => ADJ9out
      );
   ALUbSelAND : BitAND2
      PORT MAP (
         I0 => hasSrcB,
         I1 => nIR5,
         O  => useSrcB
      );
   IndStallNot : BitNOT1
      PORT MAP (
         I => sub,
         O => Ind_stall_L
      );
   notIR5 : BitNOT1
      PORT MAP (
         I => IR5,
         O => nIR5
      );
   ID_CWSplit : CWSplit
      PORT MAP (
         CW              => CW_internal,
         LoadPC          => OPEN,
         LoadReg         => OPEN,
         LoadNZP         => OPEN,
         PCWriteback     => OPEN,
         PCMuxSel        => OPEN,
         PCAddMuxSel     => PCAddMuxSel,
         ExtPCMuxSel     => OPEN,
         DestMuxSel      => DestMuxSel,
         RFInputMuxSel   => OPEN,
         StoreSR         => StoreSR,
         ImmMuxSel       => ImmMuxSel,
         ExMuxSel        => OPEN,
         AddrMuxSel      => OPEN,
         DataMuxSel      => OPEN,
         ByteMuxSel      => OPEN,
         WBMuxSel        => OPEN,
         ALUOp           => OPEN,
         MRead_l         => OPEN,
         MWrite_l        => OPEN,
         isBR            => ID_isBR,
         isLD            => ID_isLD,
         isST            => ID_isST_internal,
         isInd           => OPEN,
         isUnconditional => OPEN,
         isIndirect      => OPEN,
         isNormalBR      => OPEN,
         isLEA           => isLEA,
         noSrcA          => noSrcA,
         hasSrcB         => hasSrcB,
         enBubble        => enBubble,
         isIndLoad       => OPEN,
         addNOPs         => IDaddNOPs
      );
   theROM : Control_ROM
      PORT MAP (
         Opcode      => Opcode,
         reset_l     => reset_l,
         ControlWord => preCW
      );
   DecodeRegSplitter : IWRegSplitter
      PORT MAP (
         Dest       => Dest,
         DestMuxSel => DestMuxSel,
         SrcA       => SrcA,
         SrcB       => SrcB,
         isST       => ID_isST_internal,
         noSrcA     => noSrcA,
         useSrcB    => useSrcB,
         DR         => DR,
         SR1        => SR1,
         SR2        => SR2
      );
   ID_IWSplit : IWSplit
      PORT MAP (
         IW       => IW,
         index6   => index6,
         vect8    => OPEN,
         offset9  => offset9,
         offset11 => offset11,
         SrcA     => SrcA,
         SrcB     => SrcB,
         Opcode   => Opcode,
         imm4     => imm4,
         IR5      => IR5,
         IR11     => IR11,
         Shiftop  => OPEN,
         Dest     => Dest,
         imm5     => imm5
      );
   aIndSub : IndirectSub
      PORT MAP (
         CLK          => clk,
         CWin         => preCW,
         RESET_L      => reset_l,
         mispredict_l => mispredict_l,
         stall_L      => stallInd_L,
         CWout        => CW_internal,
         sub          => sub
      );
   aPCAdd : PCAdd
      PORT MAP (
         In1 => PCPlus2out,
         In2 => PCAddMuxout,
         O   => PCAddout_internal
      );
   aRegFile : RegFile
      PORT MAP (
         Dest     => WB_Dest,
         reset_l  => reset_l,
         Input    => RFInMuxout_internal,
         RegWrite => WB_LoadReg,
         SrcB     => SrcBMuxout,
         SrcA     => SrcA,
         clk      => clk,
         RFA      => RFA,
         RFB      => RFB_internal
      );
   SrcBMux : RegMux2
      PORT MAP (
         Sel => StoreSR,
         A   => SrcB,
         B   => Dest,
         F   => SrcBMuxout
      );
   aSEXT6 : SEXT6
      PORT MAP (
         input => index6,
         SEXT6 => SEXT6out
      );
   ALUbMux : WordMux2
      PORT MAP (
         A   => ImmMuxout,
         B   => RFB_internal,
         Sel => useSrcB,
         F   => ALUB
      );
   LEAMux : WordMux2
      PORT MAP (
         A   => RFA,
         B   => PCAddout_internal,
         Sel => isLEA,
         F   => ALUA
      );
   PCAddMux : WordMux2
      PORT MAP (
         A   => ADJ9out,
         B   => ADJ11out,
         Sel => PCAddMuxSel,
         F   => PCAddMuxout
      );
   RFInMux : WordMux2
      PORT MAP (
         A   => WBMuxout,
         B   => PCout,
         Sel => RFInputMuxSel,
         F   => RFInMuxout_internal
      );
   ImmMux : WordMux4
      PORT MAP (
         A   => ADJ6out,
         B   => SEXT6out,
         C   => ADJ5out,
         D   => ZEXT4out,
         Sel => ImmMuxSel,
         F   => ImmMuxout
      );
   aZEXT4 : ZEXT4
      PORT MAP (
         ZEXT4 => ZEXT4out,
         input => imm4
      );

   -- Implicit buffered output assignments
   RFB        <= RFB_internal;
   PCAddout   <= PCAddout_internal;
   CW         <= CW_internal;
   ID_isST    <= ID_isST_internal;
   RFInMuxout <= RFInMuxout_internal;

END struct;
