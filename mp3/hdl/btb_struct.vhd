-- VHDL Entity ece411.BTB.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:57 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ece411;
USE ece411.LC3B_TYPES.all;
USE ieee.NUMERIC_STD.all;

ENTITY BTB IS
   PORT( 
      IFPCindex          : IN     LC3b_word;
      PCTargetin         : IN     LC3b_word;
      RESET_L            : IN     std_logic;
      WBPCindex          : IN     LC3b_word;
      isUnconditionalIn  : IN     std_logic;
      loadBTB            : IN     std_logic;
      predictionIn       : IN     std_logic;
      PCTargetout        : OUT    LC3b_word;
      hit                : OUT    std_logic;
      isUnconditionalout : OUT    std_logic;
      miss               : OUT    std_logic;
      predictionout      : OUT    std_logic
   );

-- Declarations

END BTB ;

--
-- VHDL Architecture ece411.BTB.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:57 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;

LIBRARY ece411;
USE ece411.LC3B_TYPES.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;

ARCHITECTURE struct OF BTB IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL btbtag   : LC3b_btb_tag;
   SIGNAL ifindex  : LC3b_btb_index;
   SIGNAL iftag    : LC3b_btb_tag;
   SIGNAL isValid  : std_logic;
   SIGNAL tagMatch : std_logic;
   SIGNAL wbindex  : LC3b_btb_index;
   SIGNAL wbtag    : LC3b_btb_tag;
   SIGNAL zero     : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL hit_internal : std_logic;


   -- Component Declarations
   COMPONENT BTB_BitArray
   PORT (
      bitin      : IN     std_logic ;
      bitwrite   : IN     std_logic ;
      index      : IN     LC3b_btb_index ;
      writeindex : IN     LC3b_btb_index ;
      reset_l    : IN     std_logic ;
      bitout     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BTB_PCSplitter
   PORT (
      wordin   : IN     LC3b_word ;
      indexout : OUT    LC3b_btb_index ;
      tagout   : OUT    LC3b_btb_tag 
   );
   END COMPONENT;
   COMPONENT BTB_TagArray
   PORT (
      RESET_L    : IN     std_logic ;
      index      : IN     LC3b_btb_index ;
      writeindex : IN     LC3b_btb_index ;
      tagin      : IN     LC3b_btb_tag ;
      tagwrite   : IN     std_logic ;
      tagout     : OUT    LC3b_btb_tag 
   );
   END COMPONENT;
   COMPONENT BTB_TagCompare
   PORT (
      tag0 : IN     LC3b_btb_tag ;
      tag1 : IN     LC3b_btb_tag ;
      eq   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BTB_WordArray
   PORT (
      datain     : IN     LC3b_word ;
      datawrite  : IN     std_logic ;
      index      : IN     LC3b_btb_index ;
      writeindex : IN     LC3b_btb_index ;
      reset_l    : IN     std_logic ;
      dataout    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT BitAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOT1
   PORT (
      I : IN     std_logic ;
      O : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BTB_BitArray USE ENTITY ece411.BTB_BitArray;
   FOR ALL : BTB_PCSplitter USE ENTITY ece411.BTB_PCSplitter;
   FOR ALL : BTB_TagArray USE ENTITY ece411.BTB_TagArray;
   FOR ALL : BTB_TagCompare USE ENTITY ece411.BTB_TagCompare;
   FOR ALL : BTB_WordArray USE ENTITY ece411.BTB_WordArray;
   FOR ALL : BitAND2 USE ENTITY ece411.BitAND2;
   FOR ALL : BitNOT1 USE ENTITY ece411.BitNOT1;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1
   zero <= '1';         


   -- Instance port mappings.
   PredictionData : BTB_BitArray
      PORT MAP (
         bitin      => predictionIn,
         bitwrite   => loadBTB,
         index      => ifindex,
         writeindex => wbindex,
         reset_l    => RESET_L,
         bitout     => predictionout
      );
   UnconditionalData : BTB_BitArray
      PORT MAP (
         bitin      => isUnconditionalIn,
         bitwrite   => loadBTB,
         index      => ifindex,
         writeindex => wbindex,
         reset_l    => RESET_L,
         bitout     => isUnconditionalout
      );
   ValidData : BTB_BitArray
      PORT MAP (
         bitin      => zero,
         bitwrite   => loadBTB,
         index      => ifindex,
         writeindex => wbindex,
         reset_l    => RESET_L,
         bitout     => isValid
      );
   theSplitter : BTB_PCSplitter
      PORT MAP (
         wordin   => IFPCindex,
         indexout => ifindex,
         tagout   => iftag
      );
   theSplitter1 : BTB_PCSplitter
      PORT MAP (
         wordin   => WBPCindex,
         indexout => wbindex,
         tagout   => wbtag
      );
   TagData : BTB_TagArray
      PORT MAP (
         RESET_L    => RESET_L,
         index      => ifindex,
         writeindex => wbindex,
         tagin      => wbtag,
         tagwrite   => loadBTB,
         tagout     => btbtag
      );
   hitCompare : BTB_TagCompare
      PORT MAP (
         tag0 => iftag,
         tag1 => btbtag,
         eq   => tagMatch
      );
   TargetData : BTB_WordArray
      PORT MAP (
         datain     => PCTargetin,
         datawrite  => loadBTB,
         index      => ifindex,
         writeindex => wbindex,
         reset_l    => RESET_L,
         dataout    => PCTargetout
      );
   hitAND : BitAND2
      PORT MAP (
         I0 => isValid,
         I1 => tagMatch,
         O  => hit_internal
      );
   missNOT : BitNOT1
      PORT MAP (
         I => hit_internal,
         O => miss
      );

   -- Implicit buffered output assignments
   hit <= hit_internal;

END struct;
