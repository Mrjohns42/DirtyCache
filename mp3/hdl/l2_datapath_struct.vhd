-- VHDL Entity ece411.L2_Datapath.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:59 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2_Datapath IS
   PORT( 
      address   : IN     LC3b_word;
      clk       : IN     std_logic;
      dataIn    : IN     LC3b_Oword;
      mread_l   : IN     std_logic;
      mwrite_l  : IN     std_logic;
      pmdataIn  : IN     LC3b_Oword;
      pmresp_h  : IN     std_logic;
      reset_l   : IN     std_logic;
      dataOut   : OUT    LC3b_oword;
      pmaddress : OUT    LC3b_word;
      pmdataOut : OUT    LC3b_Oword;
      pmread_l  : OUT    std_logic;
      pmwrite_l : OUT    std_logic;
      resp_h    : OUT    std_logic
   );

-- Declarations

END L2_Datapath ;

--
-- VHDL Architecture ece411.L2_Datapath.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:59 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;

LIBRARY ece411;

ARCHITECTURE struct OF L2_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL DataMuxSel      : std_logic;
   SIGNAL DataMuxSel_d    : std_logic;
   SIGNAL DataMuxout      : LC3b_Oword;
   SIGNAL O               : std_logic;
   SIGNAL O1              : std_logic;
   SIGNAL O10             : std_logic;
   SIGNAL O2              : std_logic;
   SIGNAL O3              : std_logic;
   SIGNAL O4              : std_logic;
   SIGNAL O5              : std_logic;
   SIGNAL O6              : std_logic;
   SIGNAL O7              : std_logic;
   SIGNAL O8              : std_logic;
   SIGNAL O9              : std_logic;
   SIGNAL WBTagMuxout     : LC3b_c_tag;
   SIGNAL WBaddress       : LC3b_word;
   SIGNAL active          : std_logic;
   SIGNAL addressLRU      : LC3b_word;
   SIGNAL addressMuxSel   : std_logic;
   SIGNAL busy_h          : std_logic;
   SIGNAL busy_l          : std_logic;
   SIGNAL d_mwrite_h      : std_logic;
   SIGNAL dataLRU         : LC3b_Oword;
   SIGNAL data_w0         : LC3b_Oword;
   SIGNAL data_w1         : LC3b_Oword;
   SIGNAL data_w2         : LC3b_Oword;
   SIGNAL data_w3         : LC3b_Oword;
   SIGNAL data_w4         : LC3b_Oword;
   SIGNAL data_w5         : LC3b_Oword;
   SIGNAL data_w6         : LC3b_Oword;
   SIGNAL data_w7         : LC3b_Oword;
   SIGNAL dirty_w0        : std_logic;
   SIGNAL dirty_w1        : std_logic;
   SIGNAL dirty_w2        : std_logic;
   SIGNAL dirty_w3        : std_logic;
   SIGNAL dirty_w4        : std_logic;
   SIGNAL dirty_w5        : std_logic;
   SIGNAL dirty_w6        : std_logic;
   SIGNAL dirty_w7        : std_logic;
   SIGNAL dowriteback     : std_logic;
   SIGNAL hit_h           : std_logic;
   SIGNAL hit_w0          : std_logic;
   SIGNAL hit_w1          : std_logic;
   SIGNAL hit_w2          : std_logic;
   SIGNAL hit_w3          : std_logic;
   SIGNAL hit_w4          : std_logic;
   SIGNAL hit_w5          : std_logic;
   SIGNAL hit_w6          : std_logic;
   SIGNAL hit_w7          : std_logic;
   SIGNAL index           : LC3b_c_index;
   SIGNAL loadLRU         : std_logic;
   SIGNAL loadline        : std_logic;
   SIGNAL loadline_w0     : std_logic;
   SIGNAL loadline_w1     : std_logic;
   SIGNAL loadline_w2     : std_logic;
   SIGNAL loadline_w3     : std_logic;
   SIGNAL loadline_w4     : std_logic;
   SIGNAL loadline_w5     : std_logic;
   SIGNAL loadline_w6     : std_logic;
   SIGNAL loadline_w7     : std_logic;
   SIGNAL lru             : LC3b_8mux_sel;
   SIGNAL lru0            : std_logic;
   SIGNAL lru1            : std_logic;
   SIGNAL lru2            : std_logic;
   SIGNAL lru3            : std_logic;
   SIGNAL lru4            : std_logic;
   SIGNAL lru5            : std_logic;
   SIGNAL lru6            : std_logic;
   SIGNAL lru7            : std_logic;
   SIGNAL lru_dirty       : std_logic;
   SIGNAL miss_h          : std_logic;
   SIGNAL mread_h         : std_logic;
   SIGNAL mwrite_h        : std_logic;
   SIGNAL needwriteback   : std_logic;
   SIGNAL nloadline       : std_logic;
   SIGNAL nprehit         : std_logic;
   SIGNAL o11             : std_logic;
   SIGNAL offset          : LC3b_c_offset;
   SIGNAL one             : std_logic;
   SIGNAL pmwrite_h       : std_logic;
   SIGNAL prehit          : std_logic;
   SIGNAL prehit1         : std_logic;
   SIGNAL prehit2         : std_logic;
   SIGNAL preresp         : std_logic;
   SIGNAL resp_en         : std_logic;
   SIGNAL tag             : LC3b_c_tag;
   SIGNAL tag_w0          : LC3b_c_tag;
   SIGNAL tag_w1          : LC3b_c_tag;
   SIGNAL tag_w2          : LC3b_c_tag;
   SIGNAL tag_w3          : LC3b_c_tag;
   SIGNAL tag_w4          : LC3b_c_tag;
   SIGNAL tag_w5          : LC3b_c_tag;
   SIGNAL tag_w6          : LC3b_c_tag;
   SIGNAL tag_w7          : LC3b_c_tag;
   SIGNAL wayMuxSel8      : LC3b_8mux_sel;
   SIGNAL write_w0        : std_logic;
   SIGNAL write_w1        : std_logic;
   SIGNAL write_w2        : std_logic;
   SIGNAL write_w3        : std_logic;
   SIGNAL write_w4        : std_logic;
   SIGNAL write_w5        : std_logic;
   SIGNAL write_w6        : std_logic;
   SIGNAL write_w7        : std_logic;
   SIGNAL writebackdone_h : std_logic;
   SIGNAL writebackdone_l : std_logic;
   SIGNAL writehit_w0     : std_logic;
   SIGNAL writehit_w1     : std_logic;
   SIGNAL writehit_w2     : std_logic;
   SIGNAL writehit_w3     : std_logic;
   SIGNAL writehit_w4     : std_logic;
   SIGNAL writehit_w5     : std_logic;
   SIGNAL writehit_w6     : std_logic;
   SIGNAL writehit_w7     : std_logic;
   SIGNAL writemiss       : std_logic;
   SIGNAL writemiss_w0    : std_logic;
   SIGNAL writemiss_w1    : std_logic;
   SIGNAL writemiss_w2    : std_logic;
   SIGNAL writemiss_w3    : std_logic;
   SIGNAL writemiss_w4    : std_logic;
   SIGNAL writemiss_w5    : std_logic;
   SIGNAL writemiss_w6    : std_logic;
   SIGNAL writemiss_w7    : std_logic;
   SIGNAL zero            : STD_LOGIC;


   -- Component Declarations
   COMPONENT BitAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitAND3
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      I2 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOR2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOT1
   PORT (
      I : IN     std_logic ;
      O : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitOR2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitOR3
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      I2 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitOR4
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      I2 : IN     std_logic ;
      I3 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT CatADDR
   PORT (
      tag     : IN     LC3b_c_tag ;
      Index   : IN     LC3b_c_index ;
      offset  : IN     LC3b_c_offset ;
      ADDRESS : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Delay6
   PORT (
      I : IN     std_logic ;
      O : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT L2_Controller
   PORT (
      active        : IN     std_logic ;
      busy_h        : IN     std_logic ;
      clk           : IN     std_logic ;
      hit_h         : IN     std_logic ;
      lru_dirty     : IN     std_logic ;
      mread_l       : IN     std_logic ;
      mwrite_l      : IN     std_logic ;
      pmresp_h      : IN     std_logic ;
      reset_l       : IN     std_logic ;
      DataMuxSel    : OUT    std_logic ;
      addressMuxSel : OUT    std_logic ;
      loadline_h    : OUT    std_logic ;
      pmread_l      : OUT    std_logic ;
      resp_en       : OUT    std_logic ;
      writemiss_h   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT L2_TrueLRU
   PORT (
      Index   : IN     LC3b_c_index ;
      RESET_L : IN     std_logic ;
      clk     : IN     std_logic ;
      hit0    : IN     std_logic ;
      hit1    : IN     std_logic ;
      hit2    : IN     std_logic ;
      hit3    : IN     std_logic ;
      hit4    : IN     std_logic ;
      hit5    : IN     std_logic ;
      hit6    : IN     std_logic ;
      hit7    : IN     std_logic ;
      load    : IN     std_logic ;
      lru0    : OUT    std_logic ;
      lru1    : OUT    std_logic ;
      lru2    : OUT    std_logic ;
      lru3    : OUT    std_logic ;
      lru4    : OUT    std_logic ;
      lru5    : OUT    std_logic ;
      lru6    : OUT    std_logic ;
      lru7    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT L2_Way
   PORT (
      dataIn   : IN     LC3b_oword ;
      dirtyIn  : IN     std_logic ;
      index    : IN     LC3b_c_index ;
      reset_l  : IN     std_logic ;
      tag      : IN     LC3b_c_tag ;
      validIn  : IN     std_logic ;
      write    : IN     std_logic ;
      writeV   : IN     std_logic ;
      dataOut  : OUT    LC3b_Oword ;
      dirtyOut : OUT    std_logic ;
      hit      : OUT    std_logic ;
      tagOut   : OUT    LC3b_c_tag 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      I0  : IN     LC3b_Oword ;
      I1  : IN     LC3b_Oword ;
      Sel : IN     std_logic ;
      O   : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT OWordMux8
   PORT (
      I0  : IN     LC3b_Oword ;
      I1  : IN     LC3b_Oword ;
      I2  : IN     LC3b_Oword ;
      I3  : IN     LC3b_Oword ;
      I4  : IN     LC3b_Oword ;
      I5  : IN     LC3b_Oword ;
      I6  : IN     LC3b_Oword ;
      I7  : IN     LC3b_Oword ;
      Sel : IN     LC3b_8mux_sel ;
      O   : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT Reg1
   PORT (
      reset_l : IN     std_logic ;
      clk     : IN     std_logic ;
      en      : IN     std_logic ;
      input   : IN     std_logic ;
      output  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Reg128
   PORT (
      reset_l : IN     STD_LOGIC ;
      clk     : IN     STD_LOGIC ;
      en      : IN     STD_LOGIC ;
      input   : IN     LC3b_Oword ;
      output  : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT Reg16
   PORT (
      reset_l : IN     STD_LOGIC ;
      clk     : IN     STD_LOGIC ;
      en      : IN     STD_LOGIC ;
      input   : IN     LC3b_word ;
      output  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SplitADDR
   PORT (
      addr   : IN     LC3b_word ;
      tag    : OUT    LC3b_c_tag ;
      index  : OUT    LC3b_c_index ;
      offset : OUT    LC3b_c_offset 
   );
   END COMPONENT;
   COMPONENT TagMux8
   PORT (
      Sel : IN     LC3b_8mux_sel ;
      I0  : IN     LC3b_c_tag ;
      I1  : IN     LC3b_c_tag ;
      I2  : IN     LC3b_c_tag ;
      I3  : IN     LC3b_c_tag ;
      I4  : IN     LC3b_c_tag ;
      I5  : IN     LC3b_c_tag ;
      I6  : IN     LC3b_c_tag ;
      I7  : IN     LC3b_c_tag ;
      O   : OUT    LC3b_c_tag 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT encoder_8to3
   PORT (
      I0     : IN     std_logic ;
      I1     : IN     std_logic ;
      I2     : IN     std_logic ;
      I3     : IN     std_logic ;
      I4     : IN     std_logic ;
      I5     : IN     std_logic ;
      I6     : IN     std_logic ;
      I7     : IN     std_logic ;
      output : OUT    LC3b_8mux_sel 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BitAND2 USE ENTITY ece411.BitAND2;
   FOR ALL : BitAND3 USE ENTITY ece411.BitAND3;
   FOR ALL : BitNAND2 USE ENTITY ece411.BitNAND2;
   FOR ALL : BitNOR2 USE ENTITY ece411.BitNOR2;
   FOR ALL : BitNOT1 USE ENTITY ece411.BitNOT1;
   FOR ALL : BitOR2 USE ENTITY ece411.BitOR2;
   FOR ALL : BitOR3 USE ENTITY ece411.BitOR3;
   FOR ALL : BitOR4 USE ENTITY ece411.BitOR4;
   FOR ALL : CatADDR USE ENTITY ece411.CatADDR;
   FOR ALL : Delay6 USE ENTITY ece411.Delay6;
   FOR ALL : L2_Controller USE ENTITY ece411.L2_Controller;
   FOR ALL : L2_TrueLRU USE ENTITY ece411.L2_TrueLRU;
   FOR ALL : L2_Way USE ENTITY ece411.L2_Way;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : OWordMux8 USE ENTITY ece411.OWordMux8;
   FOR ALL : Reg1 USE ENTITY ece411.Reg1;
   FOR ALL : Reg128 USE ENTITY ece411.Reg128;
   FOR ALL : Reg16 USE ENTITY ece411.Reg16;
   FOR ALL : SplitADDR USE ENTITY ece411.SplitADDR;
   FOR ALL : TagMux8 USE ENTITY ece411.TagMux8;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : encoder_8to3 USE ENTITY ece411.encoder_8to3;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1
   one <= '1';        


   -- Instance port mappings.
   U_2 : BitAND2
      PORT MAP (
         I0 => resp_en,
         I1 => preresp,
         O  => resp_h
      );
   U_5 : BitAND2
      PORT MAP (
         I0 => resp_en,
         I1 => busy_l,
         O  => dowriteback
      );
   U_7 : BitAND2
      PORT MAP (
         I0 => nloadline,
         I1 => busy_h,
         O  => pmwrite_h
      );
   U_10 : BitAND2
      PORT MAP (
         I0 => dirty_w1,
         I1 => lru1,
         O  => O8
      );
   U_12 : BitAND2
      PORT MAP (
         I0 => dirty_w0,
         I1 => lru0,
         O  => O9
      );
   U_15 : BitAND2
      PORT MAP (
         I0 => writemiss,
         I1 => lru0,
         O  => writemiss_w0
      );
   U_16 : BitAND2
      PORT MAP (
         I0 => writemiss,
         I1 => lru1,
         O  => writemiss_w1
      );
   U_19 : BitAND2
      PORT MAP (
         I0 => miss_h,
         I1 => lru_dirty,
         O  => needwriteback
      );
   U_20 : BitAND2
      PORT MAP (
         I0 => pmwrite_h,
         I1 => pmresp_h,
         O  => writebackdone_h
      );
   U_22 : BitAND2
      PORT MAP (
         I0 => needwriteback,
         I1 => writebackdone_l,
         O  => O3
      );
   U_43 : BitAND2
      PORT MAP (
         I0 => writemiss,
         I1 => lru2,
         O  => writemiss_w2
      );
   U_44 : BitAND2
      PORT MAP (
         I0 => writemiss,
         I1 => lru3,
         O  => writemiss_w3
      );
   U_45 : BitAND2
      PORT MAP (
         I0 => writemiss,
         I1 => lru4,
         O  => writemiss_w4
      );
   U_46 : BitAND2
      PORT MAP (
         I0 => writemiss,
         I1 => lru5,
         O  => writemiss_w5
      );
   U_47 : BitAND2
      PORT MAP (
         I0 => writemiss,
         I1 => lru6,
         O  => writemiss_w6
      );
   U_48 : BitAND2
      PORT MAP (
         I0 => writemiss,
         I1 => lru7,
         O  => writemiss_w7
      );
   U_57 : BitAND2
      PORT MAP (
         I0 => dirty_w2,
         I1 => lru2,
         O  => O7
      );
   U_58 : BitAND2
      PORT MAP (
         I0 => dirty_w3,
         I1 => lru3,
         O  => O6
      );
   U_59 : BitAND2
      PORT MAP (
         I0 => dirty_w4,
         I1 => lru4,
         O  => O5
      );
   U_60 : BitAND2
      PORT MAP (
         I0 => dirty_w5,
         I1 => lru5,
         O  => O4
      );
   U_61 : BitAND2
      PORT MAP (
         I0 => dirty_w6,
         I1 => lru6,
         O  => O1
      );
   U_62 : BitAND2
      PORT MAP (
         I0 => dirty_w7,
         I1 => lru7,
         O  => O
      );
   hitAND : BitAND2
      PORT MAP (
         I0 => prehit,
         I1 => active,
         O  => hit_h
      );
   missAND : BitAND2
      PORT MAP (
         I0 => active,
         I1 => nprehit,
         O  => miss_h
      );
   U_3 : BitAND3
      PORT MAP (
         I0 => mread_h,
         I1 => resp_en,
         I2 => hit_h,
         O  => loadLRU
      );
   U_25 : BitAND3
      PORT MAP (
         I0 => loadline,
         I1 => lru1,
         I2 => pmresp_h,
         O  => loadline_w1
      );
   U_26 : BitAND3
      PORT MAP (
         I0 => loadline,
         I1 => lru0,
         I2 => pmresp_h,
         O  => loadline_w0
      );
   U_31 : BitAND3
      PORT MAP (
         I0 => mwrite_h,
         I1 => resp_en,
         I2 => hit_w2,
         O  => writehit_w2
      );
   U_32 : BitAND3
      PORT MAP (
         I0 => mwrite_h,
         I1 => resp_en,
         I2 => hit_w3,
         O  => writehit_w3
      );
   U_33 : BitAND3
      PORT MAP (
         I0 => mwrite_h,
         I1 => resp_en,
         I2 => hit_w4,
         O  => writehit_w4
      );
   U_34 : BitAND3
      PORT MAP (
         I0 => mwrite_h,
         I1 => resp_en,
         I2 => hit_w5,
         O  => writehit_w5
      );
   U_35 : BitAND3
      PORT MAP (
         I0 => mwrite_h,
         I1 => resp_en,
         I2 => hit_w6,
         O  => writehit_w6
      );
   U_36 : BitAND3
      PORT MAP (
         I0 => mwrite_h,
         I1 => resp_en,
         I2 => hit_w7,
         O  => writehit_w7
      );
   U_37 : BitAND3
      PORT MAP (
         I0 => loadline,
         I1 => lru2,
         I2 => pmresp_h,
         O  => loadline_w2
      );
   U_38 : BitAND3
      PORT MAP (
         I0 => loadline,
         I1 => lru3,
         I2 => pmresp_h,
         O  => loadline_w3
      );
   U_39 : BitAND3
      PORT MAP (
         I0 => loadline,
         I1 => lru4,
         I2 => pmresp_h,
         O  => loadline_w4
      );
   U_40 : BitAND3
      PORT MAP (
         I0 => loadline,
         I1 => lru5,
         I2 => pmresp_h,
         O  => loadline_w5
      );
   U_41 : BitAND3
      PORT MAP (
         I0 => loadline,
         I1 => lru6,
         I2 => pmresp_h,
         O  => loadline_w6
      );
   U_42 : BitAND3
      PORT MAP (
         I0 => loadline,
         I1 => lru7,
         I2 => pmresp_h,
         O  => loadline_w7
      );
   w_w0AND : BitAND3
      PORT MAP (
         I0 => mwrite_h,
         I1 => resp_en,
         I2 => hit_w0,
         O  => writehit_w0
      );
   w_w1AND : BitAND3
      PORT MAP (
         I0 => mwrite_h,
         I1 => resp_en,
         I2 => hit_w1,
         O  => writehit_w1
      );
   RWAND : BitNAND2
      PORT MAP (
         I0 => mread_l,
         I1 => mwrite_l,
         O  => active
      );
   U_14 : BitNAND2
      PORT MAP (
         I0 => nloadline,
         I1 => busy_h,
         O  => pmwrite_l
      );
   U_21 : BitNAND2
      PORT MAP (
         I0 => pmwrite_h,
         I1 => pmresp_h,
         O  => writebackdone_l
      );
   U_30 : BitNOR2
      PORT MAP (
         I0 => prehit1,
         I1 => prehit2,
         O  => nprehit
      );
   U_6 : BitNOT1
      PORT MAP (
         I => loadline,
         O => nloadline
      );
   U_9 : BitNOT1
      PORT MAP (
         I => mread_l,
         O => mread_h
      );
   U_11 : BitNOT1
      PORT MAP (
         I => one,
         O => zero
      );
   U_27 : BitNOT1
      PORT MAP (
         I => busy_h,
         O => busy_l
      );
   writeNOT : BitNOT1
      PORT MAP (
         I => mwrite_l,
         O => mwrite_h
      );
   U_1 : BitOR2
      PORT MAP (
         I0 => writemiss,
         I1 => hit_h,
         O  => preresp
      );
   U_23 : BitOR2
      PORT MAP (
         I0 => dowriteback,
         I1 => writebackdone_h,
         O  => O2
      );
   U_29 : BitOR2
      PORT MAP (
         I0 => prehit1,
         I1 => prehit2,
         O  => prehit
      );
   U_64 : BitOR2
      PORT MAP (
         I0 => O10,
         I1 => o11,
         O  => lru_dirty
      );
   U_17 : BitOR3
      PORT MAP (
         I0 => writehit_w0,
         I1 => loadline_w0,
         I2 => writemiss_w0,
         O  => write_w0
      );
   U_18 : BitOR3
      PORT MAP (
         I0 => writehit_w1,
         I1 => loadline_w1,
         I2 => writemiss_w1,
         O  => write_w1
      );
   U_49 : BitOR3
      PORT MAP (
         I0 => writehit_w2,
         I1 => loadline_w2,
         I2 => writemiss_w2,
         O  => write_w2
      );
   U_50 : BitOR3
      PORT MAP (
         I0 => writehit_w3,
         I1 => loadline_w3,
         I2 => writemiss_w3,
         O  => write_w3
      );
   U_51 : BitOR3
      PORT MAP (
         I0 => writehit_w4,
         I1 => loadline_w4,
         I2 => writemiss_w4,
         O  => write_w4
      );
   U_52 : BitOR3
      PORT MAP (
         I0 => writehit_w5,
         I1 => loadline_w5,
         I2 => writemiss_w5,
         O  => write_w5
      );
   U_53 : BitOR3
      PORT MAP (
         I0 => writehit_w6,
         I1 => loadline_w6,
         I2 => writemiss_w6,
         O  => write_w6
      );
   U_54 : BitOR3
      PORT MAP (
         I0 => writehit_w7,
         I1 => loadline_w7,
         I2 => writemiss_w7,
         O  => write_w7
      );
   U_8 : BitOR4
      PORT MAP (
         I0 => hit_w0,
         I1 => hit_w1,
         I2 => hit_w2,
         I3 => hit_w3,
         O  => prehit1
      );
   U_13 : BitOR4
      PORT MAP (
         I0 => O9,
         I1 => O8,
         I2 => O7,
         I3 => O6,
         O  => O10
      );
   U_28 : BitOR4
      PORT MAP (
         I0 => hit_w4,
         I1 => hit_w5,
         I2 => hit_w6,
         I3 => hit_w7,
         O  => prehit2
      );
   U_63 : BitOR4
      PORT MAP (
         I0 => O5,
         I1 => O4,
         I2 => O1,
         I3 => O,
         O  => o11
      );
   catWBAddr : CatADDR
      PORT MAP (
         tag     => WBTagMuxout,
         Index   => index,
         offset  => offset,
         ADDRESS => addressLRU
      );
   U_4 : Delay6
      PORT MAP (
         I => mwrite_h,
         O => d_mwrite_h
      );
   U_24 : Delay6
      PORT MAP (
         I => DataMuxSel,
         O => DataMuxSel_d
      );
   theController : L2_Controller
      PORT MAP (
         active        => active,
         busy_h        => busy_h,
         clk           => clk,
         hit_h         => hit_h,
         lru_dirty     => lru_dirty,
         mread_l       => mread_l,
         mwrite_l      => mwrite_l,
         pmresp_h      => pmresp_h,
         reset_l       => reset_l,
         DataMuxSel    => DataMuxSel,
         addressMuxSel => addressMuxSel,
         loadline_h    => loadline,
         pmread_l      => pmread_l,
         resp_en       => resp_en,
         writemiss_h   => writemiss
      );
   theLRU : L2_TrueLRU
      PORT MAP (
         Index   => index,
         RESET_L => reset_l,
         clk     => clk,
         hit0    => hit_w0,
         hit1    => hit_w1,
         hit2    => hit_w2,
         hit3    => hit_w3,
         hit4    => hit_w4,
         hit5    => hit_w5,
         hit6    => hit_w6,
         hit7    => hit_w7,
         load    => loadLRU,
         lru0    => lru0,
         lru1    => lru1,
         lru2    => lru2,
         lru3    => lru3,
         lru4    => lru4,
         lru5    => lru5,
         lru6    => lru6,
         lru7    => lru7
      );
   way0 : L2_Way
      PORT MAP (
         dataIn   => DataMuxout,
         dirtyIn  => d_mwrite_h,
         index    => index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => one,
         write    => write_w0,
         writeV   => loadline_w0,
         dataOut  => data_w0,
         dirtyOut => dirty_w0,
         hit      => hit_w0,
         tagOut   => tag_w0
      );
   way1 : L2_Way
      PORT MAP (
         dataIn   => DataMuxout,
         dirtyIn  => d_mwrite_h,
         index    => index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => one,
         write    => write_w1,
         writeV   => loadline_w1,
         dataOut  => data_w1,
         dirtyOut => dirty_w1,
         hit      => hit_w1,
         tagOut   => tag_w1
      );
   way2 : L2_Way
      PORT MAP (
         dataIn   => DataMuxout,
         dirtyIn  => d_mwrite_h,
         index    => index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => one,
         write    => write_w2,
         writeV   => loadline_w2,
         dataOut  => data_w2,
         dirtyOut => dirty_w2,
         hit      => hit_w2,
         tagOut   => tag_w2
      );
   way3 : L2_Way
      PORT MAP (
         dataIn   => DataMuxout,
         dirtyIn  => d_mwrite_h,
         index    => index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => one,
         write    => write_w3,
         writeV   => loadline_w3,
         dataOut  => data_w3,
         dirtyOut => dirty_w3,
         hit      => hit_w3,
         tagOut   => tag_w3
      );
   way4 : L2_Way
      PORT MAP (
         dataIn   => DataMuxout,
         dirtyIn  => d_mwrite_h,
         index    => index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => one,
         write    => write_w4,
         writeV   => loadline_w4,
         dataOut  => data_w4,
         dirtyOut => dirty_w4,
         hit      => hit_w4,
         tagOut   => tag_w4
      );
   way5 : L2_Way
      PORT MAP (
         dataIn   => DataMuxout,
         dirtyIn  => d_mwrite_h,
         index    => index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => one,
         write    => write_w5,
         writeV   => loadline_w5,
         dataOut  => data_w5,
         dirtyOut => dirty_w5,
         hit      => hit_w5,
         tagOut   => tag_w5
      );
   way6 : L2_Way
      PORT MAP (
         dataIn   => DataMuxout,
         dirtyIn  => d_mwrite_h,
         index    => index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => one,
         write    => write_w6,
         writeV   => loadline_w6,
         dataOut  => data_w6,
         dirtyOut => dirty_w6,
         hit      => hit_w6,
         tagOut   => tag_w6
      );
   way7 : L2_Way
      PORT MAP (
         dataIn   => DataMuxout,
         dirtyIn  => d_mwrite_h,
         index    => index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => one,
         write    => write_w7,
         writeV   => loadline_w7,
         dataOut  => data_w7,
         dirtyOut => dirty_w7,
         hit      => hit_w7,
         tagOut   => tag_w7
      );
   U_0 : OWordMux2
      PORT MAP (
         I0  => dataIn,
         I1  => pmdataIn,
         Sel => DataMuxSel_d,
         O   => DataMuxout
      );
   U_55 : OWordMux8
      PORT MAP (
         I0  => data_w0,
         I1  => data_w1,
         I2  => data_w2,
         I3  => data_w3,
         I4  => data_w4,
         I5  => data_w5,
         I6  => data_w6,
         I7  => data_w7,
         Sel => wayMuxSel8,
         O   => dataOut
      );
   U_65 : OWordMux8
      PORT MAP (
         I0  => data_w0,
         I1  => data_w1,
         I2  => data_w2,
         I3  => data_w3,
         I4  => data_w4,
         I5  => data_w5,
         I6  => data_w6,
         I7  => data_w7,
         Sel => lru,
         O   => dataLRU
      );
   busyReg : Reg1
      PORT MAP (
         reset_l => reset_l,
         clk     => clk,
         en      => O2,
         input   => O3,
         output  => busy_h
      );
   dataReg : Reg128
      PORT MAP (
         reset_l => reset_l,
         clk     => clk,
         en      => dowriteback,
         input   => dataLRU,
         output  => pmdataOut
      );
   addrReg : Reg16
      PORT MAP (
         reset_l => reset_l,
         clk     => clk,
         en      => dowriteback,
         input   => addressLRU,
         output  => WBaddress
      );
   aSplitAddr : SplitADDR
      PORT MAP (
         addr   => address,
         tag    => tag,
         index  => index,
         offset => offset
      );
   U_67 : TagMux8
      PORT MAP (
         Sel => lru,
         I0  => tag_w0,
         I1  => tag_w1,
         I2  => tag_w2,
         I3  => tag_w3,
         I4  => tag_w4,
         I5  => tag_w5,
         I6  => tag_w6,
         I7  => tag_w7,
         O   => WBTagMuxout
      );
   AddrMux : WordMux2
      PORT MAP (
         A   => WBaddress,
         B   => address,
         Sel => addressMuxSel,
         F   => pmaddress
      );
   U_68 : encoder_8to3
      PORT MAP (
         I0     => lru0,
         I1     => lru1,
         I2     => lru2,
         I3     => lru3,
         I4     => lru4,
         I5     => lru5,
         I6     => lru6,
         I7     => lru7,
         output => lru
      );
   hitEncoder8 : encoder_8to3
      PORT MAP (
         I0     => hit_w0,
         I1     => hit_w1,
         I2     => hit_w2,
         I3     => hit_w3,
         I4     => hit_w4,
         I5     => hit_w5,
         I6     => hit_w6,
         I7     => hit_w7,
         output => wayMuxSel8
      );

END struct;
