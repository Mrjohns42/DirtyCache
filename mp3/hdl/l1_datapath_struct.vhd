-- VHDL Entity ece411.L1_Datapath.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:55 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L1_Datapath IS
   PORT( 
      ADDRESS      : IN     LC3b_word;
      DATAOUT      : IN     LC3b_word;
      DataMuxSel   : IN     std_logic;
      Dirty        : IN     std_logic;
      MREAD_L      : IN     std_logic;
      MWRITEH_L    : IN     std_logic;
      MWRITEL_L    : IN     std_logic;
      Resp_en      : IN     std_logic;
      Valid        : IN     std_logic;
      WBAddrMuxSel : IN     std_logic;
      WriteLine_h  : IN     std_logic;
      WriteValid_h : IN     std_logic;
      clk          : IN     std_logic;
      pmdatain     : IN     LC3b_Oword;
      pmresp_h     : IN     std_logic;
      reset_l      : IN     std_logic;
      DATAIN       : OUT    LC3b_word;
      LRU_Dirty    : OUT    std_logic;
      MISS_H       : OUT    std_logic;
      MRESP_H      : OUT    std_logic;
      pmaddress    : OUT    LC3b_word;
      pmdataout    : OUT    LC3b_Oword
   );

-- Declarations

END L1_Datapath ;

--
-- VHDL Architecture ece411.L1_Datapath.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:55 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF L1_Datapath IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL CatWBaddrout    : LC3b_word;
   SIGNAL Cathitout       : LC3b_4mux_sel;
   SIGNAL Catword0_hout   : LC3b_word;
   SIGNAL Catword0_lout   : LC3b_word;
   SIGNAL Catword1_hout   : LC3b_word;
   SIGNAL Catword1_lout   : LC3b_word;
   SIGNAL Catword2_hout   : LC3b_word;
   SIGNAL Catword2_lout   : LC3b_word;
   SIGNAL Catword3_hout   : LC3b_word;
   SIGNAL Catword3_lout   : LC3b_word;
   SIGNAL Catword4_hout   : LC3b_word;
   SIGNAL Catword4_lout   : LC3b_word;
   SIGNAL Catword5_hout   : LC3b_word;
   SIGNAL Catword5_lout   : LC3b_word;
   SIGNAL Catword6_hout   : LC3b_word;
   SIGNAL Catword6_lout   : LC3b_word;
   SIGNAL Catword7_hout   : LC3b_word;
   SIGNAL Catword7_lout   : LC3b_word;
   SIGNAL Catwriteout     : LC3b_4mux_sel;
   SIGNAL D_dout          : std_logic;
   SIGNAL DataMuxSel_dout : std_logic;
   SIGNAL DataMuxout      : LC3b_Oword;
   SIGNAL Data_h          : LC3b_byte;
   SIGNAL Data_l          : LC3b_byte;
   SIGNAL Data_w0out      : LC3b_Oword;
   SIGNAL Data_w1out      : LC3b_Oword;
   SIGNAL Dirty_w0out     : std_logic;
   SIGNAL Dirty_w1out     : std_logic;
   SIGNAL Index           : LC3b_c_index;
   SIGNAL LRUout          : std_logic;
   SIGNAL LRUwrite_w0out  : std_logic;
   SIGNAL LRUwrite_w1out  : std_logic;
   SIGNAL LineMuxout      : LC3b_Oword;
   SIGNAL LoadLRU         : std_logic;
   SIGNAL RWout           : std_logic;
   SIGNAL RWout_d         : std_logic;
   SIGNAL Splitoffsetout  : LC3b_8mux_sel;
   SIGNAL Tag_w0out       : LC3b_c_tag;
   SIGNAL Tag_w1out       : LC3b_c_tag;
   SIGNAL V_dout          : std_logic;
   SIGNAL WBTagMuxout     : LC3b_c_tag;
   SIGNAL WayMuxout       : LC3b_Oword;
   SIGNAL WriteV_w0       : std_logic;
   SIGNAL WriteV_w1       : std_logic;
   SIGNAL X128bout        : LC3b_Oword;
   SIGNAL X16bout         : LC3b_word;
   SIGNAL hit_w0out       : std_logic;
   SIGNAL hit_w1out       : std_logic;
   SIGNAL hitout          : std_logic;
   SIGNAL hitwrite_w0out  : std_logic;
   SIGNAL hitwrite_w1out  : std_logic;
   SIGNAL line0out        : LC3b_Oword;
   SIGNAL line1out        : LC3b_Oword;
   SIGNAL line2out        : LC3b_Oword;
   SIGNAL line3out        : LC3b_Oword;
   SIGNAL line4out        : LC3b_Oword;
   SIGNAL line5out        : LC3b_Oword;
   SIGNAL line6out        : LC3b_Oword;
   SIGNAL line7out        : LC3b_Oword;
   SIGNAL nLRUout         : std_logic;
   SIGNAL nhitout         : std_logic;
   SIGNAL offset          : LC3b_c_offset;
   SIGNAL pre_w0          : std_logic;
   SIGNAL pre_w1          : std_logic;
   SIGNAL tag             : LC3b_c_tag;
   SIGNAL word0           : LC3b_word;
   SIGNAL word0Muxout     : LC3b_word;
   SIGNAL word0_h         : LC3b_byte;
   SIGNAL word0_l         : LC3b_byte;
   SIGNAL word1           : LC3b_word;
   SIGNAL word1Muxout     : LC3b_word;
   SIGNAL word1_h         : LC3b_byte;
   SIGNAL word1_l         : LC3b_byte;
   SIGNAL word2           : LC3b_word;
   SIGNAL word2Muxout     : LC3b_word;
   SIGNAL word2_h         : LC3b_byte;
   SIGNAL word2_l         : LC3b_byte;
   SIGNAL word3           : LC3b_word;
   SIGNAL word3Muxout     : LC3b_word;
   SIGNAL word3_h         : LC3b_byte;
   SIGNAL word3_l         : LC3b_byte;
   SIGNAL word4           : LC3b_word;
   SIGNAL word4Muxout     : LC3b_word;
   SIGNAL word4_h         : LC3b_byte;
   SIGNAL word4_l         : LC3b_byte;
   SIGNAL word5           : LC3b_word;
   SIGNAL word5Muxout     : LC3b_word;
   SIGNAL word5_h         : LC3b_byte;
   SIGNAL word5_l         : LC3b_byte;
   SIGNAL word6           : LC3b_word;
   SIGNAL word6Muxout     : LC3b_word;
   SIGNAL word6_h         : LC3b_byte;
   SIGNAL word6_l         : LC3b_byte;
   SIGNAL word7           : LC3b_word;
   SIGNAL word7Muxout     : LC3b_word;
   SIGNAL word7_h         : LC3b_byte;
   SIGNAL word7_l         : LC3b_byte;
   SIGNAL write_w0        : std_logic;
   SIGNAL write_w1        : std_logic;
   SIGNAL writeout        : std_logic;


   -- Component Declarations
   COMPONENT BitAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitAND3
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      I2 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitMux2
   PORT (
      Sel : IN     std_logic ;
      A   : IN     std_logic ;
      B   : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNAND3
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      I2 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOR2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOT1
   PORT (
      I : IN     std_logic ;
      O : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitOR2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT CatADDR
   PORT (
      tag     : IN     LC3b_c_tag ;
      Index   : IN     LC3b_c_index ;
      offset  : IN     LC3b_c_offset ;
      ADDRESS : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT CatOWord
   PORT (
      word0 : IN     LC3b_word ;
      word1 : IN     LC3b_word ;
      word2 : IN     LC3b_word ;
      word3 : IN     LC3b_word ;
      word4 : IN     LC3b_word ;
      word5 : IN     LC3b_word ;
      word6 : IN     LC3b_word ;
      word7 : IN     LC3b_word ;
      OWord : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT CatWord
   PORT (
      byte0 : IN     LC3b_byte ;
      byte1 : IN     LC3b_byte ;
      Word  : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT Delay21
   PORT (
      input  : IN     std_logic ;
      output : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Delay6
   PORT (
      I : IN     std_logic ;
      O : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT L1_Way
   PORT (
      active   : IN     std_logic ;
      dataIn   : IN     LC3b_oword ;
      dirtyIn  : IN     std_logic ;
      index    : IN     LC3b_c_index ;
      reset_l  : IN     std_logic ;
      tag      : IN     LC3b_c_tag ;
      validIn  : IN     std_logic ;
      write    : IN     std_logic ;
      writeV   : IN     std_logic ;
      dataOut  : OUT    LC3b_Oword ;
      dirtyOut : OUT    std_logic ;
      hit      : OUT    std_logic ;
      tagOut   : OUT    LC3b_c_tag 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      I0  : IN     LC3b_Oword ;
      I1  : IN     LC3b_Oword ;
      Sel : IN     std_logic ;
      O   : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT OWordMux4
   PORT (
      I0  : IN     LC3b_Oword ;
      I1  : IN     LC3b_Oword ;
      I2  : IN     LC3b_Oword ;
      I3  : IN     LC3b_Oword ;
      Sel : IN     LC3b_4mux_sel ;
      O   : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT OWordMux8
   PORT (
      I0  : IN     LC3b_Oword ;
      I1  : IN     LC3b_Oword ;
      I2  : IN     LC3b_Oword ;
      I3  : IN     LC3b_Oword ;
      I4  : IN     LC3b_Oword ;
      I5  : IN     LC3b_Oword ;
      I6  : IN     LC3b_Oword ;
      I7  : IN     LC3b_Oword ;
      Sel : IN     LC3b_8mux_sel ;
      O   : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT SplitADDR
   PORT (
      addr   : IN     LC3b_word ;
      tag    : OUT    LC3b_c_tag ;
      index  : OUT    LC3b_c_index ;
      offset : OUT    LC3b_c_offset 
   );
   END COMPONENT;
   COMPONENT SplitOWord
   PORT (
      input : IN     LC3b_Oword ;
      word0 : OUT    LC3b_word ;
      word1 : OUT    LC3b_word ;
      word2 : OUT    LC3b_word ;
      word3 : OUT    LC3b_word ;
      word4 : OUT    LC3b_word ;
      word5 : OUT    LC3b_word ;
      word6 : OUT    LC3b_word ;
      word7 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SplitWord
   PORT (
      word  : IN     LC3b_word ;
      byte0 : OUT    LC3b_byte ;
      byte1 : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT Splitoffset
   PORT (
      input : IN     LC3b_c_offset ;
      split : OUT    LC3b_8mux_sel 
   );
   END COMPONENT;
   COMPONENT TagMux2
   PORT (
      Sel : IN     std_logic ;
      A   : IN     LC3b_c_tag ;
      B   : IN     LC3b_c_tag ;
      F   : OUT    LC3b_c_tag 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux8
   PORT (
      I0  : IN     LC3b_word ;
      I1  : IN     LC3b_word ;
      I2  : IN     LC3b_word ;
      I3  : IN     LC3b_word ;
      I4  : IN     LC3b_word ;
      I5  : IN     LC3b_word ;
      I6  : IN     LC3b_word ;
      I7  : IN     LC3b_word ;
      Sel : IN     LC3b_8mux_sel ;
      O   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT X128b
   PORT (
      X128bout : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT X16b
   PORT (
      X16bout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT bitArray
   PORT (
      RESET_L  : IN     std_logic ;
      bitWrite : IN     std_logic ;
      Index    : IN     LC3b_c_index ;
      bitIn    : IN     std_logic ;
      bitOut   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT cat2b
   PORT (
      b1  : IN     std_logic ;
      b0  : IN     std_logic ;
      c2b : OUT    LC3b_4mux_sel 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BitAND2 USE ENTITY ece411.BitAND2;
   FOR ALL : BitAND3 USE ENTITY ece411.BitAND3;
   FOR ALL : BitMux2 USE ENTITY ece411.BitMux2;
   FOR ALL : BitNAND2 USE ENTITY ece411.BitNAND2;
   FOR ALL : BitNAND3 USE ENTITY ece411.BitNAND3;
   FOR ALL : BitNOR2 USE ENTITY ece411.BitNOR2;
   FOR ALL : BitNOT1 USE ENTITY ece411.BitNOT1;
   FOR ALL : BitOR2 USE ENTITY ece411.BitOR2;
   FOR ALL : CatADDR USE ENTITY ece411.CatADDR;
   FOR ALL : CatOWord USE ENTITY ece411.CatOWord;
   FOR ALL : CatWord USE ENTITY ece411.CatWord;
   FOR ALL : Delay21 USE ENTITY ece411.Delay21;
   FOR ALL : Delay6 USE ENTITY ece411.Delay6;
   FOR ALL : L1_Way USE ENTITY ece411.L1_Way;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : OWordMux4 USE ENTITY ece411.OWordMux4;
   FOR ALL : OWordMux8 USE ENTITY ece411.OWordMux8;
   FOR ALL : SplitADDR USE ENTITY ece411.SplitADDR;
   FOR ALL : SplitOWord USE ENTITY ece411.SplitOWord;
   FOR ALL : SplitWord USE ENTITY ece411.SplitWord;
   FOR ALL : Splitoffset USE ENTITY ece411.Splitoffset;
   FOR ALL : TagMux2 USE ENTITY ece411.TagMux2;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : WordMux8 USE ENTITY ece411.WordMux8;
   FOR ALL : X128b USE ENTITY ece411.X128b;
   FOR ALL : X16b USE ENTITY ece411.X16b;
   FOR ALL : bitArray USE ENTITY ece411.bitArray;
   FOR ALL : cat2b USE ENTITY ece411.cat2b;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- eb1 1
   write_w0 <= (pre_w0 AND ( clk NOR clk'delayed(22ns)));

   -- HDL Embedded Text Block 2 eb2
   -- eb2 2
   write_w1 <= (pre_w1 AND (clk NOR clk'delayed(22ns)));

   -- HDL Embedded Text Block 3 eb3
   -- eb3 3
   LoadLRU <= (RWout AND (hitout AND Resp_en) AND (clk NOR clk'delayed(22ns)));


   -- Instance port mappings.
   Resp : BitAND2
      PORT MAP (
         I0 => hitout,
         I1 => Resp_en,
         O  => MRESP_H
      );
   WV_w0 : BitAND2
      PORT MAP (
         I0 => nLRUout,
         I1 => WriteValid_h,
         O  => WriteV_w0
      );
   WV_w1 : BitAND2
      PORT MAP (
         I0 => WriteValid_h,
         I1 => LRUout,
         O  => WriteV_w1
      );
   hitwrite_w0 : BitAND2
      PORT MAP (
         I0 => hit_w0out,
         I1 => writeout,
         O  => hitwrite_w0out
      );
   hitwrite_w1 : BitAND2
      PORT MAP (
         I0 => writeout,
         I1 => hit_w1out,
         O  => hitwrite_w1out
      );
   miss : BitAND2
      PORT MAP (
         I0 => RWout,
         I1 => nhitout,
         O  => MISS_H
      );
   LRUwrite_w0 : BitAND3
      PORT MAP (
         I0 => WriteLine_h,
         I1 => pmresp_h,
         I2 => nLRUout,
         O  => LRUwrite_w0out
      );
   LRUwrite_w1 : BitAND3
      PORT MAP (
         I0 => LRUout,
         I1 => WriteLine_h,
         I2 => pmresp_h,
         O  => LRUwrite_w1out
      );
   DMux : BitMux2
      PORT MAP (
         Sel => LRUout,
         A   => Dirty_w0out,
         B   => Dirty_w1out,
         F   => LRU_Dirty
      );
   write : BitNAND2
      PORT MAP (
         I0 => MWRITEL_L,
         I1 => MWRITEH_L,
         O  => writeout
      );
   RW : BitNAND3
      PORT MAP (
         I0 => MREAD_L,
         I1 => MWRITEH_L,
         I2 => MWRITEL_L,
         O  => RWout
      );
   nhit : BitNOR2
      PORT MAP (
         I0 => hit_w1out,
         I1 => hit_w0out,
         O  => nhitout
      );
   nLRU : BitNOT1
      PORT MAP (
         I => LRUout,
         O => nLRUout
      );
   hit : BitOR2
      PORT MAP (
         I0 => hit_w0out,
         I1 => hit_w1out,
         O  => hitout
      );
   w_w0 : BitOR2
      PORT MAP (
         I0 => hitwrite_w0out,
         I1 => LRUwrite_w0out,
         O  => pre_w0
      );
   w_w1 : BitOR2
      PORT MAP (
         I0 => hitwrite_w1out,
         I1 => LRUwrite_w1out,
         O  => pre_w1
      );
   CatWBaddr : CatADDR
      PORT MAP (
         tag     => WBTagMuxout,
         Index   => Index,
         offset  => offset,
         ADDRESS => CatWBaddrout
      );
   line0 : CatOWord
      PORT MAP (
         word0 => word0Muxout,
         word1 => word1,
         word2 => word2,
         word3 => word3,
         word4 => word4,
         word5 => word5,
         word6 => word6,
         word7 => word7,
         OWord => line0out
      );
   line1 : CatOWord
      PORT MAP (
         word0 => word0,
         word1 => word1Muxout,
         word2 => word2,
         word3 => word3,
         word4 => word4,
         word5 => word5,
         word6 => word6,
         word7 => word7,
         OWord => line1out
      );
   line2 : CatOWord
      PORT MAP (
         word0 => word0,
         word1 => word1,
         word2 => word2Muxout,
         word3 => word3,
         word4 => word4,
         word5 => word5,
         word6 => word6,
         word7 => word7,
         OWord => line2out
      );
   line3 : CatOWord
      PORT MAP (
         word0 => word0,
         word1 => word1,
         word2 => word2,
         word3 => word3Muxout,
         word4 => word4,
         word5 => word5,
         word6 => word6,
         word7 => word7,
         OWord => line3out
      );
   line4 : CatOWord
      PORT MAP (
         word0 => word0,
         word1 => word1,
         word2 => word2,
         word3 => word3,
         word4 => word4Muxout,
         word5 => word5,
         word6 => word6,
         word7 => word7,
         OWord => line4out
      );
   line5 : CatOWord
      PORT MAP (
         word0 => word0,
         word1 => word1,
         word2 => word2,
         word3 => word3,
         word4 => word4,
         word5 => word5Muxout,
         word6 => word6,
         word7 => word7,
         OWord => line5out
      );
   line6 : CatOWord
      PORT MAP (
         word0 => word0,
         word1 => word1,
         word2 => word2,
         word3 => word3,
         word4 => word4,
         word5 => word5,
         word6 => word6Muxout,
         word7 => word7,
         OWord => line6out
      );
   line7 : CatOWord
      PORT MAP (
         word0 => word0,
         word1 => word1,
         word2 => word2,
         word3 => word3,
         word4 => word4,
         word5 => word5,
         word6 => word6,
         word7 => word7Muxout,
         OWord => line7out
      );
   Catword0_h : CatWord
      PORT MAP (
         byte0 => word0_l,
         byte1 => Data_h,
         Word  => Catword0_hout
      );
   Catword0_l : CatWord
      PORT MAP (
         byte0 => Data_l,
         byte1 => word0_h,
         Word  => Catword0_lout
      );
   Catword1_h : CatWord
      PORT MAP (
         byte0 => word1_l,
         byte1 => Data_h,
         Word  => Catword1_hout
      );
   Catword1_l : CatWord
      PORT MAP (
         byte0 => Data_l,
         byte1 => word1_h,
         Word  => Catword1_lout
      );
   Catword2_h : CatWord
      PORT MAP (
         byte0 => word2_l,
         byte1 => Data_h,
         Word  => Catword2_hout
      );
   Catword2_l : CatWord
      PORT MAP (
         byte0 => Data_l,
         byte1 => word2_h,
         Word  => Catword2_lout
      );
   Catword3_h : CatWord
      PORT MAP (
         byte0 => word3_l,
         byte1 => Data_h,
         Word  => Catword3_hout
      );
   Catword3_l : CatWord
      PORT MAP (
         byte0 => Data_l,
         byte1 => word3_h,
         Word  => Catword3_lout
      );
   Catword4_h : CatWord
      PORT MAP (
         byte0 => word4_l,
         byte1 => Data_h,
         Word  => Catword4_hout
      );
   Catword4_l : CatWord
      PORT MAP (
         byte0 => Data_l,
         byte1 => word4_h,
         Word  => Catword4_lout
      );
   Catword5_h : CatWord
      PORT MAP (
         byte0 => word5_l,
         byte1 => Data_h,
         Word  => Catword5_hout
      );
   Catword5_l : CatWord
      PORT MAP (
         byte0 => Data_l,
         byte1 => word5_h,
         Word  => Catword5_lout
      );
   Catword6_h : CatWord
      PORT MAP (
         byte0 => word6_l,
         byte1 => Data_h,
         Word  => Catword6_hout
      );
   Catword6_l : CatWord
      PORT MAP (
         byte0 => Data_l,
         byte1 => word6_h,
         Word  => Catword6_lout
      );
   Catword7_h : CatWord
      PORT MAP (
         byte0 => word7_l,
         byte1 => Data_h,
         Word  => Catword7_hout
      );
   Catword7_l : CatWord
      PORT MAP (
         byte0 => Data_l,
         byte1 => word7_h,
         Word  => Catword7_lout
      );
   aDelay21 : Delay21
      PORT MAP (
         input  => RWout,
         output => RWout_d
      );
   D_d : Delay6
      PORT MAP (
         I => Dirty,
         O => D_dout
      );
   DataMuxSel_d : Delay6
      PORT MAP (
         I => DataMuxSel,
         O => DataMuxSel_dout
      );
   V_d : Delay6
      PORT MAP (
         I => Valid,
         O => V_dout
      );
   way0 : L1_Way
      PORT MAP (
         active   => RWout_d,
         dataIn   => DataMuxout,
         dirtyIn  => D_dout,
         index    => Index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => V_dout,
         write    => write_w0,
         writeV   => WriteV_w0,
         dataOut  => Data_w0out,
         dirtyOut => Dirty_w0out,
         hit      => hit_w0out,
         tagOut   => Tag_w0out
      );
   way1 : L1_Way
      PORT MAP (
         active   => RWout_d,
         dataIn   => DataMuxout,
         dirtyIn  => D_dout,
         index    => Index,
         reset_l  => reset_l,
         tag      => tag,
         validIn  => V_dout,
         write    => write_w1,
         writeV   => WriteV_w1,
         dataOut  => Data_w1out,
         dirtyOut => Dirty_w1out,
         hit      => hit_w1out,
         tagOut   => Tag_w1out
      );
   DataMux : OWordMux2
      PORT MAP (
         I0  => LineMuxout,
         I1  => pmdatain,
         Sel => DataMuxSel_dout,
         O   => DataMuxout
      );
   pmdataMux : OWordMux2
      PORT MAP (
         I0  => Data_w0out,
         I1  => Data_w1out,
         Sel => LRUout,
         O   => pmdataout
      );
   WayMux : OWordMux4
      PORT MAP (
         I0  => X128bout,
         I1  => Data_w0out,
         I2  => Data_w1out,
         I3  => X128bout,
         Sel => Cathitout,
         O   => WayMuxout
      );
   LineMux : OWordMux8
      PORT MAP (
         I0  => line0out,
         I1  => line1out,
         I2  => line2out,
         I3  => line3out,
         I4  => line4out,
         I5  => line5out,
         I6  => line6out,
         I7  => line7out,
         Sel => Splitoffsetout,
         O   => LineMuxout
      );
   aSplitADDR : SplitADDR
      PORT MAP (
         addr   => ADDRESS,
         tag    => tag,
         index  => Index,
         offset => offset
      );
   aSplitOWord : SplitOWord
      PORT MAP (
         input => WayMuxout,
         word0 => word0,
         word1 => word1,
         word2 => word2,
         word3 => word3,
         word4 => word4,
         word5 => word5,
         word6 => word6,
         word7 => word7
      );
   SplitData : SplitWord
      PORT MAP (
         word  => DATAOUT,
         byte0 => Data_l,
         byte1 => Data_h
      );
   Splitword0 : SplitWord
      PORT MAP (
         word  => word0,
         byte0 => word0_l,
         byte1 => word0_h
      );
   Splitword1 : SplitWord
      PORT MAP (
         word  => word1,
         byte0 => word1_l,
         byte1 => word1_h
      );
   Splitword2 : SplitWord
      PORT MAP (
         word  => word2,
         byte0 => word2_l,
         byte1 => word2_h
      );
   Splitword3 : SplitWord
      PORT MAP (
         word  => word3,
         byte0 => word3_l,
         byte1 => word3_h
      );
   Splitword4 : SplitWord
      PORT MAP (
         word  => word4,
         byte0 => word4_l,
         byte1 => word4_h
      );
   Splitword5 : SplitWord
      PORT MAP (
         word  => word5,
         byte0 => word5_l,
         byte1 => word5_h
      );
   Splitword6 : SplitWord
      PORT MAP (
         word  => word6,
         byte0 => word6_l,
         byte1 => word6_h
      );
   Splitword7 : SplitWord
      PORT MAP (
         word  => word7,
         byte0 => word7_l,
         byte1 => word7_h
      );
   aSplitoffset : Splitoffset
      PORT MAP (
         input => offset,
         split => Splitoffsetout
      );
   WBTagMux : TagMux2
      PORT MAP (
         Sel => LRUout,
         A   => Tag_w0out,
         B   => Tag_w1out,
         F   => WBTagMuxout
      );
   WBAddrMux : WordMux2
      PORT MAP (
         A   => ADDRESS,
         B   => CatWBaddrout,
         Sel => WBAddrMuxSel,
         F   => pmaddress
      );
   word0Mux : WordMux4
      PORT MAP (
         A   => DATAOUT,
         B   => Catword0_hout,
         C   => Catword0_lout,
         D   => X16bout,
         Sel => Catwriteout,
         F   => word0Muxout
      );
   word1Mux : WordMux4
      PORT MAP (
         A   => DATAOUT,
         B   => Catword1_hout,
         C   => Catword1_lout,
         D   => X16bout,
         Sel => Catwriteout,
         F   => word1Muxout
      );
   word2Mux : WordMux4
      PORT MAP (
         A   => DATAOUT,
         B   => Catword2_hout,
         C   => Catword2_lout,
         D   => X16bout,
         Sel => Catwriteout,
         F   => word2Muxout
      );
   word3Mux : WordMux4
      PORT MAP (
         A   => DATAOUT,
         B   => Catword3_hout,
         C   => Catword3_lout,
         D   => X16bout,
         Sel => Catwriteout,
         F   => word3Muxout
      );
   word4Mux : WordMux4
      PORT MAP (
         A   => DATAOUT,
         B   => Catword4_hout,
         C   => Catword4_lout,
         D   => X16bout,
         Sel => Catwriteout,
         F   => word4Muxout
      );
   word5Mux : WordMux4
      PORT MAP (
         A   => DATAOUT,
         B   => Catword5_hout,
         C   => Catword5_lout,
         D   => X16bout,
         Sel => Catwriteout,
         F   => word5Muxout
      );
   word6Mux : WordMux4
      PORT MAP (
         A   => DATAOUT,
         B   => Catword6_hout,
         C   => Catword6_lout,
         D   => X16bout,
         Sel => Catwriteout,
         F   => word6Muxout
      );
   word7Mux : WordMux4
      PORT MAP (
         A   => DATAOUT,
         B   => Catword7_hout,
         C   => Catword7_lout,
         D   => X16bout,
         Sel => Catwriteout,
         F   => word7Muxout
      );
   WordMux : WordMux8
      PORT MAP (
         I0  => word0,
         I1  => word1,
         I2  => word2,
         I3  => word3,
         I4  => word4,
         I5  => word5,
         I6  => word6,
         I7  => word7,
         Sel => Splitoffsetout,
         O   => DATAIN
      );
   aX128b : X128b
      PORT MAP (
         X128bout => X128bout
      );
   aX16b : X16b
      PORT MAP (
         X16bout => X16bout
      );
   LRU : bitArray
      PORT MAP (
         RESET_L  => reset_l,
         bitWrite => LoadLRU,
         Index    => Index,
         bitIn    => hit_w0out,
         bitOut   => LRUout
      );
   Cathit : cat2b
      PORT MAP (
         b1  => hit_w1out,
         b0  => hit_w0out,
         c2b => Cathitout
      );
   Catwrite : cat2b
      PORT MAP (
         b1  => MWRITEH_L,
         b0  => MWRITEL_L,
         c2b => Catwriteout
      );

END struct;
