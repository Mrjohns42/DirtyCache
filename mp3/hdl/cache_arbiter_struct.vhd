-- VHDL Entity ece411.Cache_Arbiter.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:56 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Cache_Arbiter IS
   PORT( 
      DATAIN     : IN     LC3b_oword;
      D_ADDRESS  : IN     LC3b_word;
      D_DATAOUT  : IN     LC3b_oword;
      D_MREAD_L  : IN     std_logic;
      D_MWRITE_L : IN     std_logic;
      I_ADDRESS  : IN     LC3b_word;
      I_MREAD_L  : IN     std_logic;
      MRESP_H    : IN     std_logic;
      clk        : IN     std_logic;
      reset_l    : IN     std_logic;
      ADDRESS    : OUT    LC3b_word;
      DATAOUT    : OUT    LC3b_Oword;
      D_DATAIN   : OUT    LC3b_Oword;
      D_MRESP_H  : OUT    std_logic;
      I_DATAIN   : OUT    LC3b_Oword;
      I_MRESP_H  : OUT    std_logic;
      MREAD_L    : OUT    std_logic;
      MWRITE_L   : OUT    std_logic
   );

-- Declarations

END Cache_Arbiter ;

--
-- VHDL Architecture ece411.Cache_Arbiter.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:56 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF Cache_Arbiter IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL D_req       : std_logic;
   SIGNAL I_req       : std_logic;
   SIGNAL State_D     : std_logic;
   SIGNAL State_I     : std_logic;
   SIGNAL X128b0      : LC3b_Oword;
   SIGNAL X128b1      : LC3b_Oword;
   SIGNAL X128b2      : LC3b_Oword;
   SIGNAL idle_h      : std_logic;
   SIGNAL one         : std_logic;
   SIGNAL premread_l  : std_logic;
   SIGNAL premwrite_l : std_logic;


   -- Component Declarations
   COMPONENT Arbiter_Controller
   PORT (
      D_Ack   : IN     std_logic ;
      I_Ack   : IN     std_logic ;
      MRESP_H : IN     std_logic ;
      clk     : IN     std_logic ;
      reset_l : IN     std_logic ;
      State_D : OUT    std_logic ;
      State_I : OUT    std_logic ;
      idle_h  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitMux2
   PORT (
      Sel : IN     std_logic ;
      A   : IN     std_logic ;
      B   : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitOR2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OWordMux2
   PORT (
      I0  : IN     LC3b_Oword ;
      I1  : IN     LC3b_Oword ;
      Sel : IN     std_logic ;
      O   : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT X128b
   PORT (
      X128bout : OUT    LC3b_Oword 
   );
   END COMPONENT;
   COMPONENT const1
   PORT (
      one : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : Arbiter_Controller USE ENTITY ece411.Arbiter_Controller;
   FOR ALL : BitAND2 USE ENTITY ece411.BitAND2;
   FOR ALL : BitMux2 USE ENTITY ece411.BitMux2;
   FOR ALL : BitNAND2 USE ENTITY ece411.BitNAND2;
   FOR ALL : BitOR2 USE ENTITY ece411.BitOR2;
   FOR ALL : OWordMux2 USE ENTITY ece411.OWordMux2;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : X128b USE ENTITY ece411.X128b;
   FOR ALL : const1 USE ENTITY ece411.const1;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   theController : Arbiter_Controller
      PORT MAP (
         D_Ack   => D_req,
         I_Ack   => I_req,
         MRESP_H => MRESP_H,
         clk     => clk,
         reset_l => reset_l,
         State_D => State_D,
         State_I => State_I,
         idle_h  => idle_h
      );
   U_0 : BitAND2
      PORT MAP (
         I0 => MRESP_H,
         I1 => State_I,
         O  => I_MRESP_H
      );
   U_1 : BitAND2
      PORT MAP (
         I0 => MRESP_H,
         I1 => State_D,
         O  => D_MRESP_H
      );
   U_2 : BitMux2
      PORT MAP (
         Sel => State_D,
         A   => I_MREAD_L,
         B   => D_MREAD_L,
         F   => premread_l
      );
   U_3 : BitMux2
      PORT MAP (
         Sel => State_D,
         A   => one,
         B   => D_MWRITE_L,
         F   => premwrite_l
      );
   D_reqNAND : BitNAND2
      PORT MAP (
         I0 => D_MREAD_L,
         I1 => D_MWRITE_L,
         O  => D_req
      );
   I_reqNAND : BitNAND2
      PORT MAP (
         I0 => I_MREAD_L,
         I1 => one,
         O  => I_req
      );
   U_12 : BitOR2
      PORT MAP (
         I0 => idle_h,
         I1 => premread_l,
         O  => MREAD_L
      );
   U_13 : BitOR2
      PORT MAP (
         I0 => idle_h,
         I1 => premwrite_l,
         O  => MWRITE_L
      );
   U_4 : OWordMux2
      PORT MAP (
         I0  => X128b0,
         I1  => D_DATAOUT,
         Sel => State_D,
         O   => DATAOUT
      );
   U_5 : OWordMux2
      PORT MAP (
         I0  => X128b1,
         I1  => DATAIN,
         Sel => State_I,
         O   => I_DATAIN
      );
   U_6 : OWordMux2
      PORT MAP (
         I0  => X128b2,
         I1  => DATAIN,
         Sel => State_D,
         O   => D_DATAIN
      );
   U_7 : WordMux2
      PORT MAP (
         A   => I_ADDRESS,
         B   => D_ADDRESS,
         Sel => State_D,
         F   => ADDRESS
      );
   U_8 : X128b
      PORT MAP (
         X128bout => X128b0
      );
   U_9 : X128b
      PORT MAP (
         X128bout => X128b1
      );
   U_11 : X128b
      PORT MAP (
         X128bout => X128b2
      );
   U_10 : const1
      PORT MAP (
         one => one
      );

END struct;
