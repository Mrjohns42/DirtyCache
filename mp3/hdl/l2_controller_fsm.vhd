-- VHDL Entity ece411.L2_Controller.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:58 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY L2_Controller IS
   PORT( 
      active        : IN     std_logic;
      busy_h        : IN     std_logic;
      clk           : IN     std_logic;
      hit_h         : IN     std_logic;
      lru_dirty     : IN     std_logic;
      mread_l       : IN     std_logic;
      mwrite_l      : IN     std_logic;
      pmresp_h      : IN     std_logic;
      reset_l       : IN     std_logic;
      DataMuxSel    : OUT    std_logic;
      addressMuxSel : OUT    std_logic;
      loadline_h    : OUT    std_logic;
      pmread_l      : OUT    std_logic;
      resp_en       : OUT    std_logic;
      writemiss_h   : OUT    std_logic
   );

-- Declarations

END L2_Controller ;

--
-- VHDL Architecture ece411.L2_Controller.fsm
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:58 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF L2_Controller IS

   TYPE STATE_TYPE IS (
      idle,
      hit,
      loadLine,
      writemiss
   );
 
   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state";

   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      reset_l
   )
   -----------------------------------------------------------------
   BEGIN
      IF (reset_l = '0') THEN
         current_state <= idle;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      active,
      busy_h,
      current_state,
      hit_h,
      mread_l,
      mwrite_l,
      pmresp_h
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN idle => 
            IF (active = '1') THEN 
               next_state <= hit;
            ELSE
               next_state <= idle;
            END IF;
         WHEN hit => 
            IF (hit_h = '1') THEN 
               next_state <= idle;
            ELSIF ((hit_h = '0') AND
                   (busy_h = '1')) THEN 
               next_state <= hit;
            ELSIF ((hit_h = '0') AND
                   (busy_h = '0') AND
                   (mread_l = '0')) THEN 
               next_state <= loadLine;
            ELSIF ((hit_h = '0') AND
                   (mwrite_l = '0')) THEN 
               next_state <= writemiss;
            ELSE
               next_state <= hit;
            END IF;
         WHEN loadLine => 
            IF (pmresp_h = '1') THEN 
               next_state <= idle;
            ELSE
               next_state <= loadLine;
            END IF;
         WHEN writemiss => 
            next_state <= idle;
         WHEN OTHERS =>
            next_state <= idle;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      DataMuxSel <= '0';
      addressMuxSel <= '0';
      loadline_h <= '0';
      pmread_l <= '1';
      resp_en <= '0';
      writemiss_h <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN hit => 
            resp_en <= '1';
         WHEN loadLine => 
            pmread_l <= '0' after 2ns;
            addressMuxSel <= '1';
            DataMuxSel <= '1';
            loadline_h <= '1';
         WHEN writemiss => 
            writemiss_h <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
