-- VHDL Entity ece411.STAGE_MEM.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:59 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY STAGE_MEM IS
   PORT( 
      CW            : IN     LC3b_ControlWord;
      DR            : IN     LC3b_reg;
      D_DATAIN      : IN     LC3b_word;
      Exout         : IN     LC3b_word;
      IW            : IN     LC3b_word;
      RFBout        : IN     LC3b_word;
      SR1           : IN     LC3b_reg;
      SR2           : IN     LC3b_reg;
      WB_Memout     : IN     LC3b_word;
      D_ADDRESS     : OUT    LC3b_word;
      D_DATAOUT     : OUT    LC3b_word;
      LoadReg       : OUT    std_logic;
      MEM_addNOPs   : OUT    std_logic;
      MEM_isIndLoad : OUT    std_logic;
      MEMout        : OUT    LC3b_word;
      MRead_l       : OUT    std_logic;
      MWriteH_l     : OUT    std_logic;
      MWriteL_l     : OUT    std_logic;
      enBubble      : OUT    std_logic;
      isBR          : OUT    std_logic
   );

-- Declarations

END STAGE_MEM ;

--
-- VHDL Architecture ece411.STAGE_MEM.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:59 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;

ARCHITECTURE struct OF STAGE_MEM IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL AddrMuxSel  : std_logic;
   SIGNAL ByteMuxSel  : std_logic;
   SIGNAL ByteRepout  : LC3b_word;
   SIGNAL DataMuxSel  : LC3b_4Mux_Sel;
   SIGNAL MWrite_l    : std_logic;
   SIGNAL lowbit_nout : std_logic;
   SIGNAL lowbitout   : std_logic;
   SIGNAL vect8       : LC3b_trapvect8;


   -- Component Declarations
   COMPONENT BitMux2
   PORT (
      Sel : IN     std_logic ;
      A   : IN     std_logic ;
      B   : IN     std_logic ;
      F   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOT1
   PORT (
      I : IN     std_logic ;
      O : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ByteRep
   PORT (
      output : OUT    LC3b_word ;
      input  : IN     LC3b_word 
   );
   END COMPONENT;
   COMPONENT CWSplit
   PORT (
      CW              : IN     LC3b_ControlWord ;
      LoadPC          : OUT    std_logic ;
      LoadReg         : OUT    std_logic ;
      LoadNZP         : OUT    std_logic ;
      PCWriteback     : OUT    std_logic ;
      PCMuxSel        : OUT    std_logic ;
      PCAddMuxSel     : OUT    std_logic ;
      ExtPCMuxSel     : OUT    LC3b_4mux_sel ;
      DestMuxSel      : OUT    std_logic ;
      RFInputMuxSel   : OUT    std_logic ;
      StoreSR         : OUT    std_logic ;
      ImmMuxSel       : OUT    LC3b_4mux_sel ;
      ExMuxSel        : OUT    LC3b_4mux_sel ;
      AddrMuxSel      : OUT    std_logic ;
      DataMuxSel      : OUT    LC3b_4mux_sel ;
      ByteMuxSel      : OUT    std_logic ;
      WBMuxSel        : OUT    LC3b_4mux_sel ;
      ALUOp           : OUT    LC3b_ALUop ;
      MRead_l         : OUT    std_logic ;
      MWrite_l        : OUT    std_logic ;
      isBR            : OUT    std_logic ;
      isLD            : OUT    std_logic ;
      isST            : OUT    std_logic ;
      isInd           : OUT    std_logic ;
      isUnconditional : OUT    std_logic ;
      isIndirect      : OUT    std_logic ;
      isNormalBR      : OUT    std_logic ;
      isLEA           : OUT    std_logic ;
      noSrcA          : OUT    std_logic ;
      hasSrcB         : OUT    std_logic ;
      enBubble        : OUT    std_logic ;
      isIndLoad       : OUT    std_logic ;
      addNOPs         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT IWSplit
   PORT (
      IW       : IN     LC3b_word ;
      index6   : OUT    LC3b_index6 ;
      vect8    : OUT    LC3b_trapvect8 ;
      offset9  : OUT    LC3b_offset9 ;
      offset11 : OUT    LC3b_offset11 ;
      SrcA     : OUT    LC3b_reg ;
      SrcB     : OUT    LC3b_reg ;
      Opcode   : OUT    LC3b_opcode ;
      imm4     : OUT    LC3b_imm4 ;
      IR5      : OUT    std_logic ;
      IR11     : OUT    std_logic ;
      Shiftop  : OUT    LC3b_shiftop ;
      Dest     : OUT    LC3b_reg ;
      imm5     : OUT    LC3b_imm5 
   );
   END COMPONENT;
   COMPONENT Strip0
   PORT (
      input  : IN     LC3b_word ;
      output : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BitMux2 USE ENTITY ece411.BitMux2;
   FOR ALL : BitNOT1 USE ENTITY ece411.BitNOT1;
   FOR ALL : ByteRep USE ENTITY ece411.ByteRep;
   FOR ALL : CWSplit USE ENTITY ece411.CWSplit;
   FOR ALL : IWSplit USE ENTITY ece411.IWSplit;
   FOR ALL : Strip0 USE ENTITY ece411.Strip0;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 MemOutBlock
   -- MEMout = D_DATAIN 
   MEMout <= D_DATAIN;                                       


   -- Instance port mappings.
   ByteMux0 : BitMux2
      PORT MAP (
         Sel => ByteMuxSel,
         A   => MWrite_l,
         B   => lowbitout,
         F   => MWriteL_l
      );
   ByteMux1 : BitMux2
      PORT MAP (
         Sel => ByteMuxSel,
         A   => MWrite_l,
         B   => lowbit_nout,
         F   => MWriteH_l
      );
   lowbit_n : BitNOT1
      PORT MAP (
         I => lowbitout,
         O => lowbit_nout
      );
   aByteRep : ByteRep
      PORT MAP (
         output => ByteRepout,
         input  => RFBout
      );
   MEM_CWSplit : CWSplit
      PORT MAP (
         CW              => CW,
         LoadPC          => OPEN,
         LoadReg         => LoadReg,
         LoadNZP         => OPEN,
         PCWriteback     => OPEN,
         PCMuxSel        => OPEN,
         PCAddMuxSel     => OPEN,
         ExtPCMuxSel     => OPEN,
         DestMuxSel      => OPEN,
         RFInputMuxSel   => OPEN,
         StoreSR         => OPEN,
         ImmMuxSel       => OPEN,
         ExMuxSel        => OPEN,
         AddrMuxSel      => AddrMuxSel,
         DataMuxSel      => DataMuxSel,
         ByteMuxSel      => ByteMuxSel,
         WBMuxSel        => OPEN,
         ALUOp           => OPEN,
         MRead_l         => MRead_l,
         MWrite_l        => MWrite_l,
         isBR            => isBR,
         isLD            => OPEN,
         isST            => OPEN,
         isInd           => OPEN,
         isUnconditional => OPEN,
         isIndirect      => OPEN,
         isNormalBR      => OPEN,
         isLEA           => OPEN,
         noSrcA          => OPEN,
         hasSrcB         => OPEN,
         enBubble        => enBubble,
         isIndLoad       => MEM_isIndLoad,
         addNOPs         => MEM_addNOPs
      );
   MEM_IWSplit : IWSplit
      PORT MAP (
         IW       => IW,
         index6   => OPEN,
         vect8    => vect8,
         offset9  => OPEN,
         offset11 => OPEN,
         SrcA     => OPEN,
         SrcB     => OPEN,
         Opcode   => OPEN,
         imm4     => OPEN,
         IR5      => OPEN,
         IR11     => OPEN,
         Shiftop  => OPEN,
         Dest     => OPEN,
         imm5     => OPEN
      );
   lowbit : Strip0
      PORT MAP (
         input  => Exout,
         output => lowbitout
      );
   AddrMux : WordMux2
      PORT MAP (
         A   => Exout,
         B   => WB_Memout,
         Sel => AddrMuxSel,
         F   => D_ADDRESS
      );
   DATAMux : WordMux4
      PORT MAP (
         A   => Exout,
         B   => RFBout,
         C   => ByteRepout,
         D   => ByteRepout,
         Sel => DataMuxSel,
         F   => D_DATAOUT
      );

END struct;
