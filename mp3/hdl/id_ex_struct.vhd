-- VHDL Entity ece411.ID_EX.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:58 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY ID_EX IS
   PORT( 
      bubble       : IN     std_logic;
      clk          : IN     std_logic;
      i_ALUa       : IN     LC3b_word;
      i_ALUb       : IN     LC3b_word;
      i_BTBPC      : IN     LC3b_word;
      i_BTBhit     : IN     std_logic;
      i_BTBpredict : IN     std_logic;
      i_CW         : IN     LC3b_ControlWord;
      i_DR         : IN     LC3b_reg;
      i_IW         : IN     LC3b_word;
      i_PC         : IN     LC3b_word;
      i_PCAddOut   : IN     LC3b_word;
      i_RFb        : IN     LC3b_word;
      i_SR1        : IN     LC3b_reg;
      i_SR2        : IN     LC3b_reg;
      load         : IN     std_logic;
      reset_l      : IN     std_logic;
      o_ALUa       : OUT    LC3b_word;
      o_ALUb       : OUT    LC3b_word;
      o_BTBPC      : OUT    LC3b_word;
      o_BTBhit     : OUT    STD_LOGIC;
      o_BTBpredict : OUT    STD_LOGIC;
      o_CW         : OUT    LC3b_ControlWord;
      o_DR         : OUT    LC3b_reg;
      o_IW         : OUT    LC3b_word;
      o_PC         : OUT    LC3b_word;
      o_PCAddOut   : OUT    LC3b_word;
      o_RFb        : OUT    LC3b_word;
      o_SR1        : OUT    LC3b_reg;
      o_SR2        : OUT    LC3b_reg
   );

-- Declarations

END ID_EX ;

--
-- VHDL Architecture ece411.ID_EX.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:58 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF ID_EX IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL l_ALUa       : LC3b_word;
   SIGNAL l_ALUb       : LC3b_word;
   SIGNAL l_BTBPC      : LC3b_word;
   SIGNAL l_CW         : LC3b_controlword;
   SIGNAL l_DR         : LC3b_reg;
   SIGNAL l_IW         : LC3b_word;
   SIGNAL l_PC         : LC3b_word;
   SIGNAL l_PCAddout   : LC3b_word;
   SIGNAL l_RFb        : LC3b_word;
   SIGNAL l_SR1        : LC3b_reg;
   SIGNAL l_SR2        : LC3b_reg;
   SIGNAL l_btbhit     : std_logic;
   SIGNAL l_btbpredict : std_logic;


   -- Component Declarations
   COMPONENT RegCW
   PORT (
      RESET_L : IN     std_logic ;
      A       : IN     LC3b_ControlWord ;
      EN      : IN     std_logic ;
      CLK     : IN     std_logic ;
      F       : OUT    LC3b_ControlWord 
   );
   END COMPONENT;
   COMPONENT enableCWord
   PORT (
      en      : IN     std_logic ;
      wordin  : IN     LC3b_controlword ;
      wordout : OUT    LC3b_controlword 
   );
   END COMPONENT;
   COMPONENT enableWord1
   PORT (
      bitin  : IN     std_logic ;
      en     : IN     std_logic ;
      bitout : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT enableWord16
   PORT (
      en      : IN     std_logic ;
      wordin  : IN     LC3b_word ;
      wordout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT enableWord3
   PORT (
      en      : IN     std_logic ;
      wordin  : IN     LC3b_reg ;
      wordout : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT REG1
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC ;
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC 
   );
   END COMPONENT;
   COMPONENT REG16
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     LC3b_word ;
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT REG3
   PORT (
      RESET_L : IN     STD_LOGIC ;
      A       : IN     STD_LOGIC_VECTOR (2 DOWNTO 0);
      EN      : IN     STD_LOGIC ;
      CLK     : IN     STD_LOGIC ;
      F       : OUT    STD_LOGIC_VECTOR (2 DOWNTO 0)
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : REG1 USE ENTITY mp3lib.REG1;
   FOR ALL : REG16 USE ENTITY mp3lib.REG16;
   FOR ALL : REG3 USE ENTITY mp3lib.REG3;
   FOR ALL : RegCW USE ENTITY ece411.RegCW;
   FOR ALL : enableCWord USE ENTITY ece411.enableCWord;
   FOR ALL : enableWord1 USE ENTITY ece411.enableWord1;
   FOR ALL : enableWord16 USE ENTITY ece411.enableWord16;
   FOR ALL : enableWord3 USE ENTITY ece411.enableWord3;
   -- pragma synthesis_on


BEGIN

   -- Instance port mappings.
   CW : RegCW
      PORT MAP (
         RESET_L => reset_l,
         A       => l_CW,
         EN      => load,
         CLK     => clk,
         F       => o_CW
      );
   CWbubble : enableCWord
      PORT MAP (
         en      => bubble,
         wordin  => i_CW,
         wordout => l_CW
      );
   hitBubble : enableWord1
      PORT MAP (
         bitin  => i_BTBhit,
         en     => bubble,
         bitout => l_btbhit
      );
   hitBubble1 : enableWord1
      PORT MAP (
         bitin  => i_BTBpredict,
         en     => bubble,
         bitout => l_btbpredict
      );
   ALUabubble : enableWord16
      PORT MAP (
         en      => bubble,
         wordin  => i_ALUa,
         wordout => l_ALUa
      );
   ALUbbubble : enableWord16
      PORT MAP (
         en      => bubble,
         wordin  => i_ALUb,
         wordout => l_ALUb
      );
   BTBPCBubble : enableWord16
      PORT MAP (
         en      => bubble,
         wordin  => i_BTBPC,
         wordout => l_BTBPC
      );
   IWbubble : enableWord16
      PORT MAP (
         en      => bubble,
         wordin  => i_IW,
         wordout => l_IW
      );
   PCAddbubble : enableWord16
      PORT MAP (
         en      => bubble,
         wordin  => i_PCAddOut,
         wordout => l_PCAddout
      );
   PCbubble : enableWord16
      PORT MAP (
         en      => bubble,
         wordin  => i_PC,
         wordout => l_PC
      );
   RFbbubble : enableWord16
      PORT MAP (
         en      => bubble,
         wordin  => i_RFb,
         wordout => l_RFb
      );
   DRbubble : enableWord3
      PORT MAP (
         en      => bubble,
         wordin  => i_DR,
         wordout => l_DR
      );
   DRbubble1 : enableWord3
      PORT MAP (
         en      => bubble,
         wordin  => i_SR1,
         wordout => l_SR1
      );
   DRbubble2 : enableWord3
      PORT MAP (
         en      => bubble,
         wordin  => i_SR2,
         wordout => l_SR2
      );
   U_4 : REG1
      PORT MAP (
         RESET_L => reset_l,
         A       => l_btbhit,
         EN      => load,
         CLK     => clk,
         F       => o_BTBhit
      );
   U_5 : REG1
      PORT MAP (
         RESET_L => reset_l,
         A       => l_btbpredict,
         EN      => load,
         CLK     => clk,
         F       => o_BTBpredict
      );
   ALUA : REG16
      PORT MAP (
         RESET_L => reset_l,
         A       => l_ALUa,
         EN      => load,
         CLK     => clk,
         F       => o_ALUa
      );
   ALUB : REG16
      PORT MAP (
         RESET_L => reset_l,
         A       => l_ALUb,
         EN      => load,
         CLK     => clk,
         F       => o_ALUb
      );
   IW : REG16
      PORT MAP (
         RESET_L => reset_l,
         A       => l_IW,
         EN      => load,
         CLK     => clk,
         F       => o_IW
      );
   PC : REG16
      PORT MAP (
         RESET_L => reset_l,
         A       => l_PC,
         EN      => load,
         CLK     => clk,
         F       => o_PC
      );
   PC1 : REG16
      PORT MAP (
         RESET_L => reset_l,
         A       => l_PCAddout,
         EN      => load,
         CLK     => clk,
         F       => o_PCAddOut
      );
   RFBout : REG16
      PORT MAP (
         RESET_L => reset_l,
         A       => l_RFb,
         EN      => load,
         CLK     => clk,
         F       => o_RFb
      );
   U_0 : REG16
      PORT MAP (
         RESET_L => reset_l,
         A       => l_BTBPC,
         EN      => load,
         CLK     => clk,
         F       => o_BTBPC
      );
   U_1 : REG3
      PORT MAP (
         RESET_L => reset_l,
         A       => l_DR,
         EN      => load,
         CLK     => clk,
         F       => o_DR
      );
   U_2 : REG3
      PORT MAP (
         RESET_L => reset_l,
         A       => l_SR1,
         EN      => load,
         CLK     => clk,
         F       => o_SR1
      );
   U_3 : REG3
      PORT MAP (
         RESET_L => reset_l,
         A       => l_SR2,
         EN      => load,
         CLK     => clk,
         F       => o_SR2
      );

END struct;
