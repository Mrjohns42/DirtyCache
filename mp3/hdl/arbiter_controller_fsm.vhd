-- VHDL Entity ece411.Arbiter_Controller.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:56 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY Arbiter_Controller IS
   PORT( 
      D_Ack   : IN     std_logic;
      I_Ack   : IN     std_logic;
      MRESP_H : IN     std_logic;
      clk     : IN     std_logic;
      reset_l : IN     std_logic;
      State_D : OUT    std_logic;
      State_I : OUT    std_logic;
      idle_h  : OUT    std_logic
   );

-- Declarations

END Arbiter_Controller ;

--
-- VHDL Architecture ece411.Arbiter_Controller.fsm
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:23:56 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
 
ARCHITECTURE fsm OF Arbiter_Controller IS

   TYPE STATE_TYPE IS (
      I_IDLE,
      D_IDLE,
      I_ACTIVE,
      D_ACTIVE
   );
 
   -- State vector declaration
   ATTRIBUTE state_vector : string;
   ATTRIBUTE state_vector OF fsm : ARCHITECTURE IS "current_state";

   -- Declare current and next state signals
   SIGNAL current_state : STATE_TYPE;
   SIGNAL next_state : STATE_TYPE;

BEGIN

   -----------------------------------------------------------------
   clocked_proc : PROCESS ( 
      clk,
      reset_l
   )
   -----------------------------------------------------------------
   BEGIN
      IF (reset_l = '0') THEN
         current_state <= I_IDLE;
      ELSIF (clk'EVENT AND clk = '1') THEN
         current_state <= next_state;
      END IF;
   END PROCESS clocked_proc;
 
   -----------------------------------------------------------------
   nextstate_proc : PROCESS ( 
      D_Ack,
      I_Ack,
      MRESP_H,
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      CASE current_state IS
         WHEN I_IDLE => 
            IF (D_Ack = '1') THEN 
               next_state <= D_ACTIVE;
            ELSIF (I_Ack = '1') THEN 
               next_state <= I_ACTIVE;
            ELSE
               next_state <= I_IDLE;
            END IF;
         WHEN D_IDLE => 
            IF (D_Ack = '1') THEN 
               next_state <= D_ACTIVE;
            ELSIF (I_Ack = '1') THEN 
               next_state <= I_ACTIVE;
            ELSE
               next_state <= D_IDLE;
            END IF;
         WHEN I_ACTIVE => 
            IF (MRESP_H = '1') THEN 
               next_state <= I_IDLE;
            ELSE
               next_state <= I_ACTIVE;
            END IF;
         WHEN D_ACTIVE => 
            IF (MRESP_H = '1') THEN 
               next_state <= D_IDLE;
            ELSE
               next_state <= D_ACTIVE;
            END IF;
         WHEN OTHERS =>
            next_state <= I_IDLE;
      END CASE;
   END PROCESS nextstate_proc;
 
   -----------------------------------------------------------------
   output_proc : PROCESS ( 
      current_state
   )
   -----------------------------------------------------------------
   BEGIN
      -- Default Assignment
      State_D <= '0';
      State_I <= '0';
      idle_h <= '0';

      -- Combined Actions
      CASE current_state IS
         WHEN I_IDLE => 
            State_I <= '1';
            idle_h <= '1';
         WHEN D_IDLE => 
            State_D <= '1';
            idle_h <= '1';
         WHEN I_ACTIVE => 
            State_I <= '1';
         WHEN D_ACTIVE => 
            State_D <= '1';
         WHEN OTHERS =>
            NULL;
      END CASE;
   END PROCESS output_proc;
 
END fsm;
