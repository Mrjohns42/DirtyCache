-- VHDL Entity ece411.STAGE_WB.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:24:00 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY STAGE_WB IS
   PORT( 
      ALUout              : IN     LC3b_WORD;
      BTBPC               : IN     LC3b_word;
      BTBPredict          : IN     std_logic;
      BTBhit              : IN     std_logic;
      CW                  : IN     LC3b_ControlWord;
      DR                  : IN     LC3b_reg;
      IW                  : IN     LC3b_word;
      MEM                 : IN     LC3b_WORD;
      PC                  : IN     LC3b_word;
      PCAddout            : IN     LC3b_word;
      RESET_L             : IN     std_logic;
      SR1                 : IN     LC3b_reg;
      SR2                 : IN     LC3b_reg;
      clk                 : IN     std_logic;
      BTBPredictout       : OUT    std_logic;
      BTBUnconditionalOut : OUT    std_logic;
      BranchDetected      : OUT    std_logic;
      CC                  : OUT    LC3b_CC;
      Dest                : OUT    LC3b_reg;
      ExtPC               : OUT    LC3b_word;
      LoadReg             : OUT    std_logic;
      N                   : OUT    std_logic;
      P                   : OUT    std_logic;
      PCPlus2out          : OUT    LC3b_word;
      RFInputMuxSel       : OUT    std_logic;
      WBMuxout            : OUT    LC3b_WORD;
      WB_addNOPs          : OUT    std_logic;
      Z                   : OUT    std_logic;
      enBubble            : OUT    std_logic;
      loadBTB             : OUT    std_logic;
      mispredict_h        : OUT    std_logic;
      pre_ExtPC           : OUT    LC3b_word
   );

-- Declarations

END STAGE_WB ;

--
-- VHDL Architecture ece411.STAGE_WB.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:24:00 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

LIBRARY ece411;
LIBRARY mp3lib;

ARCHITECTURE struct OF STAGE_WB IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL ALUout0                      : std_logic;
   SIGNAL BTBmiss                      : std_logic;
   SIGNAL BranchDetectedout            : std_logic;
   SIGNAL CCinBR                       : std_logic;
   SIGNAL ExtPCMuxSel                  : LC3b_4mux_sel;
   SIGNAL IR11                         : std_logic;
   SIGNAL JSRPC                        : LC3b_word;
   SIGNAL LoadNZP                      : std_logic;
   SIGNAL MemByte_h                    : LC3b_byte;
   SIGNAL MemByte_l                    : LC3b_byte;
   SIGNAL WBMuxSel                     : LC3b_4MUX_SEL;
   SIGNAL alreadybtbresolved_l         : std_logic;
   SIGNAL branchTaken                  : std_logic;
   SIGNAL ccANDed                      : std_logic;
   SIGNAL compulsoryMispredict         : std_logic;
   SIGNAL enBubble1                    : std_logic;
   SIGNAL incorrectMispredict          : std_logic;
   SIGNAL incorrectPredictNotTaken     : std_logic;
   SIGNAL incorrectPredictTaken        : std_logic;
   SIGNAL incorrectPrediction          : std_logic;
   SIGNAL incorrectlyTakenBR           : std_logic;
   SIGNAL indirectMispredict           : std_logic;
   SIGNAL isBR                         : std_logic;
   SIGNAL isBR4                        : std_logic;
   SIGNAL isCompiledNOP_l              : std_logic;
   SIGNAL isIndirect                   : std_logic;
   SIGNAL isUnconditional              : std_logic;
   SIGNAL isvalidBR                    : std_logic;
   SIGNAL ldbMuxout                    : LC3b_byte;
   SIGNAL ldbout                       : LC3b_word;
   SIGNAL loadPC                       : std_logic;
   SIGNAL notBTBpredict                : std_logic;
   SIGNAL notBranchDetectedout         : std_logic;
   SIGNAL notCCinBR                    : std_logic;
   SIGNAL notTargetEqual               : std_logic;
   SIGNAL notclk                       : std_logic;
   SIGNAL notmispredict_h              : std_logic;
   SIGNAL pre_branchdetected           : STD_LOGIC;
   SIGNAL pre_enBubble                 : std_logic;
   SIGNAL pre_loadBTB                  : std_logic;
   SIGNAL pre_loadBTB3                 : std_logic;
   SIGNAL pre_unresolvedbranchdetected : std_logic;
   SIGNAL targetEqual                  : std_logic;
   SIGNAL unconditionalNormalBR        : std_logic;
   SIGNAL untimed_loadBTB              : std_logic;

   -- Implicit buffer signal declarations
   SIGNAL CC_internal           : LC3b_CC;
   SIGNAL WBMuxout_internal     : LC3b_WORD;
   SIGNAL N_internal            : std_logic;
   SIGNAL Z_internal            : std_logic;
   SIGNAL P_internal            : std_logic;
   SIGNAL ExtPC_internal        : LC3b_word;
   SIGNAL PCPlus2out_internal   : LC3b_word;
   SIGNAL mispredict_h_internal : std_logic;
   SIGNAL pre_ExtPC_internal    : LC3b_word;


   -- Component Declarations
   COMPONENT BitAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitAND3
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      I2 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOT1
   PORT (
      I : IN     std_logic ;
      O : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitOR2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitOR3
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      I2 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BranchDetector
   PORT (
      IWN      : IN     std_logic ;
      IWP      : IN     std_logic ;
      IWZ      : IN     std_logic ;
      N        : IN     std_logic ;
      P        : IN     std_logic ;
      Z        : IN     std_logic ;
      isBR     : IN     std_logic ;
      doBranch : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT ByteMux2
   PORT (
      Sel : IN     std_logic ;
      A   : IN     LC3b_byte ;
      B   : IN     LC3b_byte ;
      F   : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT CWSplit
   PORT (
      CW              : IN     LC3b_ControlWord ;
      LoadPC          : OUT    std_logic ;
      LoadReg         : OUT    std_logic ;
      LoadNZP         : OUT    std_logic ;
      PCWriteback     : OUT    std_logic ;
      PCMuxSel        : OUT    std_logic ;
      PCAddMuxSel     : OUT    std_logic ;
      ExtPCMuxSel     : OUT    LC3b_4mux_sel ;
      DestMuxSel      : OUT    std_logic ;
      RFInputMuxSel   : OUT    std_logic ;
      StoreSR         : OUT    std_logic ;
      ImmMuxSel       : OUT    LC3b_4mux_sel ;
      ExMuxSel        : OUT    LC3b_4mux_sel ;
      AddrMuxSel      : OUT    std_logic ;
      DataMuxSel      : OUT    LC3b_4mux_sel ;
      ByteMuxSel      : OUT    std_logic ;
      WBMuxSel        : OUT    LC3b_4mux_sel ;
      ALUOp           : OUT    LC3b_ALUop ;
      MRead_l         : OUT    std_logic ;
      MWrite_l        : OUT    std_logic ;
      isBR            : OUT    std_logic ;
      isLD            : OUT    std_logic ;
      isST            : OUT    std_logic ;
      isInd           : OUT    std_logic ;
      isUnconditional : OUT    std_logic ;
      isIndirect      : OUT    std_logic ;
      isNormalBR      : OUT    std_logic ;
      isLEA           : OUT    std_logic ;
      noSrcA          : OUT    std_logic ;
      hasSrcB         : OUT    std_logic ;
      enBubble        : OUT    std_logic ;
      isIndLoad       : OUT    std_logic ;
      addNOPs         : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT GenCC
   PORT (
      GenCCin  : IN     LC3b_word ;
      GenCCout : OUT    LC3b_cc 
   );
   END COMPONENT;
   COMPONENT IWSplit
   PORT (
      IW       : IN     LC3b_word ;
      index6   : OUT    LC3b_index6 ;
      vect8    : OUT    LC3b_trapvect8 ;
      offset9  : OUT    LC3b_offset9 ;
      offset11 : OUT    LC3b_offset11 ;
      SrcA     : OUT    LC3b_reg ;
      SrcB     : OUT    LC3b_reg ;
      Opcode   : OUT    LC3b_opcode ;
      imm4     : OUT    LC3b_imm4 ;
      IR5      : OUT    std_logic ;
      IR11     : OUT    std_logic ;
      Shiftop  : OUT    LC3b_shiftop ;
      Dest     : OUT    LC3b_reg ;
      imm5     : OUT    LC3b_imm5 
   );
   END COMPONENT;
   COMPONENT NZP
   PORT (
      GenCCout : IN     LC3b_cc ;
      LoadNZP  : IN     std_logic ;
      clk      : IN     std_logic ;
      n        : OUT    std_logic ;
      p        : OUT    std_logic ;
      z        : OUT    std_logic ;
      RESET_L  : IN     std_logic 
   );
   END COMPONENT;
   COMPONENT Plus2
   PORT (
      Input : IN     LC3b_word ;
      Plus2 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT SplitWord
   PORT (
      word  : IN     LC3b_word ;
      byte0 : OUT    LC3b_byte ;
      byte1 : OUT    LC3b_byte 
   );
   END COMPONENT;
   COMPONENT Strip0
   PORT (
      input  : IN     LC3b_word ;
      output : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT WordMux2
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      Sel : IN     std_logic ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT WordMux4
   PORT (
      A   : IN     LC3b_word ;
      B   : IN     LC3b_word ;
      C   : IN     LC3b_word ;
      D   : IN     LC3b_word ;
      Sel : IN     LC3b_4mux_sel ;
      F   : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT ZEXT8
   PORT (
      input : IN     LC3b_byte ;
      ZEXT8 : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT comp16
   PORT (
      In1 : IN     LC3b_word ;
      In2 : IN     LC3b_word ;
      eq  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT OR2
   PORT (
      A : IN     STD_LOGIC ;
      B : IN     STD_LOGIC ;
      F : OUT    STD_LOGIC 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BitAND2 USE ENTITY ece411.BitAND2;
   FOR ALL : BitAND3 USE ENTITY ece411.BitAND3;
   FOR ALL : BitNAND2 USE ENTITY ece411.BitNAND2;
   FOR ALL : BitNOT1 USE ENTITY ece411.BitNOT1;
   FOR ALL : BitOR2 USE ENTITY ece411.BitOR2;
   FOR ALL : BitOR3 USE ENTITY ece411.BitOR3;
   FOR ALL : BranchDetector USE ENTITY ece411.BranchDetector;
   FOR ALL : ByteMux2 USE ENTITY ece411.ByteMux2;
   FOR ALL : CWSplit USE ENTITY ece411.CWSplit;
   FOR ALL : GenCC USE ENTITY ece411.GenCC;
   FOR ALL : IWSplit USE ENTITY ece411.IWSplit;
   FOR ALL : NZP USE ENTITY ece411.NZP;
   FOR ALL : OR2 USE ENTITY mp3lib.OR2;
   FOR ALL : Plus2 USE ENTITY ece411.Plus2;
   FOR ALL : SplitWord USE ENTITY ece411.SplitWord;
   FOR ALL : Strip0 USE ENTITY ece411.Strip0;
   FOR ALL : WordMux2 USE ENTITY ece411.WordMux2;
   FOR ALL : WordMux4 USE ENTITY ece411.WordMux4;
   FOR ALL : ZEXT8 USE ENTITY ece411.ZEXT8;
   FOR ALL : comp16 USE ENTITY ece411.comp16;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 eb1
   -- enBubble1 <= enBubble delayed by 1ns
   -- Necessary for the LoadBTBAND
   enBubble1 <= pre_enBubble after 1ns;
   enBubble <= pre_enBubble;
   isBR4 <= isBR after 4ns;
   pre_loadBTB3 <= pre_loadBTB after 3ns;
   -- Note that NOT gate delay is not
   -- used here because NOTclk can be emulated
   -- using NOT(clk) after CLOCK_PERIOD-1ns;
   notclk <= NOT(clk);                                        

   -- HDL Embedded Text Block 2 eb2
   -- Dest <= DR
   Dest <= DR;


   -- Instance port mappings.
   CompulsoryMispredictAND : BitAND2
      PORT MAP (
         I0 => BTBmiss,
         I1 => branchTaken,
         O  => compulsoryMispredict
      );
   IndirectMispredictAND : BitAND2
      PORT MAP (
         I0 => notTargetEqual,
         I1 => isUnconditional,
         O  => indirectMispredict
      );
   incorrectMispredictAND1 : BitAND2
      PORT MAP (
         I0 => BTBPredict,
         I1 => notBranchDetectedout,
         O  => incorrectPredictTaken
      );
   incorrectMispredictAND2 : BitAND2
      PORT MAP (
         I0 => notBTBpredict,
         I1 => BranchDetectedout,
         O  => incorrectPredictNotTaken
      );
   loadBTBAND : BitAND2
      PORT MAP (
         I0 => BTBmiss,
         I1 => enBubble1,
         O  => pre_loadBTB
      );
   loadBTBNOPAND : BitAND2
      PORT MAP (
         I0 => pre_loadBTB3,
         I1 => isCompiledNOP_l,
         O  => untimed_loadBTB
      );
   loadBTBNOPAND1 : BitAND2
      PORT MAP (
         I0 => notclk,
         I1 => untimed_loadBTB,
         O  => loadBTB
      );
   resolutionAND : BitAND2
      PORT MAP (
         I0 => pre_branchdetected,
         I1 => alreadybtbresolved_l,
         O  => pre_unresolvedbranchdetected
      );
   unconditionalBRAND2 : BitAND2
      PORT MAP (
         I0 => ccANDed,
         I1 => isBR,
         O  => unconditionalNormalBR
      );
   untakenBRAND : BitAND2
      PORT MAP (
         I0 => incorrectPredictTaken,
         I1 => isvalidBR,
         O  => incorrectlyTakenBR
      );
   untakenBRAND1 : BitAND2
      PORT MAP (
         I0 => isBR,
         I1 => BTBhit,
         O  => isvalidBR
      );
   incorrectMispredictAND3 : BitAND3
      PORT MAP (
         I0 => BTBhit,
         I1 => isBR,
         I2 => incorrectPrediction,
         O  => incorrectMispredict
      );
   unconditionalBRAND1 : BitAND3
      PORT MAP (
         I0 => IW(11),
         I1 => IW(10),
         I2 => IW(9),
         O  => ccANDed
      );
   U_2 : BitNAND2
      PORT MAP (
         I0 => isBR4,
         I1 => notCCinBR,
         O  => isCompiledNOP_l
      );
   resolutionNAND : BitNAND2
      PORT MAP (
         I0 => notmispredict_h,
         I1 => BTBhit,
         O  => alreadybtbresolved_l
      );
   BDNot : BitNOT1
      PORT MAP (
         I => BranchDetectedout,
         O => notBranchDetectedout
      );
   MispredictNOT : BitNOT1
      PORT MAP (
         I => mispredict_h_internal,
         O => notmispredict_h
      );
   ccinBRNOT : BitNOT1
      PORT MAP (
         I => CCinBR,
         O => notCCinBR
      );
   hitNOT : BitNOT1
      PORT MAP (
         I => BTBhit,
         O => BTBmiss
      );
   predictNOT : BitNOT1
      PORT MAP (
         I => BTBPredict,
         O => notBTBpredict
      );
   targetequalNOT : BitNOT1
      PORT MAP (
         I => targetEqual,
         O => notTargetEqual
      );
   BTBPredictOR : BitOR2
      PORT MAP (
         I0 => isUnconditional,
         I1 => IW(8),
         O  => BTBPredictout
      );
   CompulsoryMispredictOR : BitOR2
      PORT MAP (
         I0 => isUnconditional,
         I1 => BranchDetectedout,
         O  => branchTaken
      );
   incorrectMispredictOR : BitOR2
      PORT MAP (
         I0 => incorrectPredictTaken,
         I1 => incorrectPredictNotTaken,
         O  => incorrectPrediction
      );
   unconditionalBROR : BitOR2
      PORT MAP (
         I0 => unconditionalNormalBR,
         I1 => isUnconditional,
         O  => BTBUnconditionalOut
      );
   untakenBROR : BitOR2
      PORT MAP (
         I0 => pre_unresolvedbranchdetected,
         I1 => incorrectlyTakenBR,
         O  => BranchDetected
      );
   MispredictOR : BitOR3
      PORT MAP (
         I0 => indirectMispredict,
         I1 => incorrectMispredict,
         I2 => compulsoryMispredict,
         O  => mispredict_h_internal
      );
   nzpOR : BitOR3
      PORT MAP (
         I0 => IW(11),
         I1 => IW(10),
         I2 => IW(9),
         O  => CCinBR
      );
   theBranchDetector : BranchDetector
      PORT MAP (
         IWN      => IW(11),
         IWP      => IW(9),
         IWZ      => IW(10),
         N        => N_internal,
         P        => P_internal,
         Z        => Z_internal,
         isBR     => isBR,
         doBranch => BranchDetectedout
      );
   ldbMux : ByteMux2
      PORT MAP (
         Sel => ALUout0,
         A   => MemByte_l,
         B   => MemByte_h,
         F   => ldbMuxout
      );
   WB_CWSplit : CWSplit
      PORT MAP (
         CW              => CW,
         LoadPC          => loadPC,
         LoadReg         => LoadReg,
         LoadNZP         => LoadNZP,
         PCWriteback     => OPEN,
         PCMuxSel        => OPEN,
         PCAddMuxSel     => OPEN,
         ExtPCMuxSel     => ExtPCMuxSel,
         DestMuxSel      => OPEN,
         RFInputMuxSel   => RFInputMuxSel,
         StoreSR         => OPEN,
         ImmMuxSel       => OPEN,
         ExMuxSel        => OPEN,
         AddrMuxSel      => OPEN,
         DataMuxSel      => OPEN,
         ByteMuxSel      => OPEN,
         WBMuxSel        => WBMuxSel,
         ALUOp           => OPEN,
         MRead_l         => OPEN,
         MWrite_l        => OPEN,
         isBR            => isBR,
         isLD            => OPEN,
         isST            => OPEN,
         isInd           => OPEN,
         isUnconditional => isUnconditional,
         isIndirect      => isIndirect,
         isNormalBR      => OPEN,
         isLEA           => OPEN,
         noSrcA          => OPEN,
         hasSrcB         => OPEN,
         enBubble        => pre_enBubble,
         isIndLoad       => OPEN,
         addNOPs         => WB_addNOPs
      );
   aGenCC : GenCC
      PORT MAP (
         GenCCin  => WBMuxout_internal,
         GenCCout => CC_internal
      );
   WB_IWSplit : IWSplit
      PORT MAP (
         IW       => IW,
         index6   => OPEN,
         vect8    => OPEN,
         offset9  => OPEN,
         offset11 => OPEN,
         SrcA     => OPEN,
         SrcB     => OPEN,
         Opcode   => OPEN,
         imm4     => OPEN,
         IR5      => OPEN,
         IR11     => IR11,
         Shiftop  => OPEN,
         Dest     => OPEN,
         imm5     => OPEN
      );
   NZPReg : NZP
      PORT MAP (
         GenCCout => CC_internal,
         LoadNZP  => LoadNZP,
         clk      => clk,
         n        => N_internal,
         p        => P_internal,
         z        => Z_internal,
         RESET_L  => RESET_L
      );
   PCPlus2 : Plus2
      PORT MAP (
         Input => PC,
         Plus2 => PCPlus2out_internal
      );
   SplitMem : SplitWord
      PORT MAP (
         word  => MEM,
         byte0 => MemByte_l,
         byte1 => MemByte_h
      );
   aStrip0 : Strip0
      PORT MAP (
         input  => ALUout,
         output => ALUout0
      );
   JSRMux : WordMux2
      PORT MAP (
         A   => ALUout,
         B   => PCAddout,
         Sel => IR11,
         F   => JSRPC
      );
   incorrectlyTakenBRMux : WordMux2
      PORT MAP (
         A   => pre_ExtPC_internal,
         B   => PCPlus2out_internal,
         Sel => incorrectlyTakenBR,
         F   => ExtPC_internal
      );
   ExtPCMux : WordMux4
      PORT MAP (
         A   => PCAddout,
         B   => JSRPC,
         C   => MEM,
         D   => MEM,
         Sel => ExtPCMuxSel,
         F   => pre_ExtPC_internal
      );
   WBMux : WordMux4
      PORT MAP (
         A   => ALUout,
         B   => MEM,
         C   => ldbout,
         D   => PCAddout,
         Sel => WBMuxSel,
         F   => WBMuxout_internal
      );
   aZEXT8 : ZEXT8
      PORT MAP (
         input => ldbMuxout,
         ZEXT8 => ldbout
      );
   IndirectBTBComp : comp16
      PORT MAP (
         In1 => BTBPC,
         In2 => ExtPC_internal,
         eq  => targetEqual
      );
   branchOR : OR2
      PORT MAP (
         A => BranchDetectedout,
         B => loadPC,
         F => pre_branchdetected
      );

   -- Implicit buffered output assignments
   CC           <= CC_internal;
   WBMuxout     <= WBMuxout_internal;
   N            <= N_internal;
   Z            <= Z_internal;
   P            <= P_internal;
   ExtPC        <= ExtPC_internal;
   PCPlus2out   <= PCPlus2out_internal;
   mispredict_h <= mispredict_h_internal;
   pre_ExtPC    <= pre_ExtPC_internal;

END struct;
