-- VHDL Entity ece411.mp3_CPU.symbol
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:24:00 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;

ENTITY mp3_CPU IS
-- Declarations

END mp3_CPU ;

--
-- VHDL Architecture ece411.mp3_CPU.struct
--
-- Created:
--          by - ece411.ece411 (localhost)
--          at - 02:24:01 12/09/12
--
-- Generated by Mentor Graphics' HDL Designer(TM) 2005.3 (Build 75)
--
LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.NUMERIC_STD.all;

LIBRARY ece411;
USE ece411.LC3b_types.all;
USE ieee.std_logic_arith.all;

LIBRARY ece411;

ARCHITECTURE struct OF mp3_CPU IS

   -- Architecture declarations

   -- Internal signal declarations
   SIGNAL BTBPredictout       : std_logic;
   SIGNAL BTBUnconditionalout : std_logic;
   SIGNAL CC                  : LC3b_CC;
   SIGNAL CLK                 : std_logic := '0';
   SIGNAL D_ADDRESS           : LC3B_WORD;
   SIGNAL D_DATAIN            : LC3B_WORD;
   SIGNAL D_DATAOUT           : LC3B_WORD;
   SIGNAL D_MREAD_L           : STD_LOGIC;
   SIGNAL D_MRESP_H           : STD_LOGIC;
   SIGNAL D_MWRITEH_L         : STD_LOGIC;
   SIGNAL D_MWRITEL_L         : STD_LOGIC;
   SIGNAL D_pmaddress         : LC3b_word;
   SIGNAL D_pmdatain          : LC3b_Oword;
   SIGNAL D_pmdataout         : LC3b_Oword;
   SIGNAL D_pmread_l          : std_logic;
   SIGNAL D_pmresp_h          : std_logic;
   SIGNAL D_pmwrite_l         : std_logic;
   SIGNAL EX_ALUa             : LC3b_word;
   SIGNAL EX_ALUb             : LC3b_word;
   SIGNAL EX_BTBPC            : LC3b_word;
   SIGNAL EX_BTBpredict       : STD_LOGIC;
   SIGNAL EX_CW               : LC3b_ControlWord;
   SIGNAL EX_DR               : LC3b_reg;
   SIGNAL EX_IW               : LC3b_word;
   SIGNAL EX_PC               : LC3b_word;
   SIGNAL EX_PCAddOut         : LC3b_word;
   SIGNAL EX_RFBout           : LC3b_word;
   SIGNAL EX_RFbin            : LC3b_word;
   SIGNAL EX_SR1              : LC3b_reg;
   SIGNAL EX_SR2              : LC3b_reg;
   SIGNAL EX_addNOPs          : std_logic;
   SIGNAL EX_bubble_l         : std_logic;
   SIGNAL EX_bubble_l_nops    : std_logic;
   SIGNAL EX_enBubble         : std_logic;
   SIGNAL EX_hit              : STD_LOGIC;
   SIGNAL EX_isInd            : std_logic;
   SIGNAL EX_isLD             : std_logic;
   SIGNAL Exout               : LC3b_WORD;
   SIGNAL ExtPC               : LC3b_word;
   SIGNAL FWD_SR1_SEL         : LC3b_4MUX_SEL;
   SIGNAL FWD_SR2_SEL         : LC3B_4MUX_SEL;
   SIGNAL ID_ALUA             : LC3b_word;
   SIGNAL ID_ALUB             : LC3b_word;
   SIGNAL ID_BTBPC            : LC3b_word;
   SIGNAL ID_BTBpredict       : STD_LOGIC;
   SIGNAL ID_CW               : LC3b_controlword;
   SIGNAL ID_DR               : LC3b_reg;
   SIGNAL ID_IW               : LC3b_word;
   SIGNAL ID_PC               : LC3b_word;
   SIGNAL ID_PCAddout         : LC3b_word;
   SIGNAL ID_PCPlus2          : LC3b_word;
   SIGNAL ID_RFB              : LC3b_word;
   SIGNAL ID_SR1              : LC3b_reg;
   SIGNAL ID_SR2              : LC3b_reg;
   SIGNAL ID_addNOPs          : std_logic;
   SIGNAL ID_enBubble         : std_logic;
   SIGNAL ID_hit              : STD_LOGIC;
   SIGNAL ID_isLD             : std_logic;
   SIGNAL ID_isMEM            : std_logic;
   SIGNAL ID_isST             : std_logic;
   SIGNAL IF_BTBPC            : LC3b_word;
   SIGNAL IF_BTBPredict       : std_logic;
   SIGNAL IF_IDLoad           : std_logic;
   SIGNAL IF_IW               : LC3b_word;
   SIGNAL IF_PC               : LC3b_word;
   SIGNAL IF_PCPlus2          : LC3b_word;
   SIGNAL IF_hit              : std_logic;
   SIGNAL IFload              : STD_LOGIC;
   SIGNAL I_ADDRESS           : LC3b_word;
   SIGNAL I_DATAIN            : LC3b_word;
   SIGNAL I_MREAD_L           : std_logic;
   SIGNAL I_MRESP_H           : STD_LOGIC;
   SIGNAL I_pmaddress         : LC3b_word;
   SIGNAL I_pmdatain          : LC3b_Oword;
   SIGNAL I_pmread_l          : std_logic;
   SIGNAL I_pmresp_h          : std_logic;
   SIGNAL Ind_stall_L         : std_logic;
   SIGNAL LD_USE_L            : std_logic;
   SIGNAL MEM_BTBPC           : LC3b_word;
   SIGNAL MEM_BTBpredict      : STD_LOGIC;
   SIGNAL MEM_CW              : LC3b_ControlWord;
   SIGNAL MEM_DR              : LC3b_reg;
   SIGNAL MEM_Exout           : LC3b_word;
   SIGNAL MEM_IW              : LC3b_word;
   SIGNAL MEM_LoadReg         : std_logic;
   SIGNAL MEM_MEMout          : LC3b_word;
   SIGNAL MEM_PC              : LC3b_word;
   SIGNAL MEM_PCAddout        : LC3b_word;
   SIGNAL MEM_RFb             : LC3b_word;
   SIGNAL MEM_SR1             : LC3b_reg;
   SIGNAL MEM_SR2             : LC3b_reg;
   SIGNAL MEM_addNOPs         : std_logic;
   SIGNAL MEM_bubble_l        : std_logic;
   SIGNAL MEM_enBubble        : std_logic;
   SIGNAL MEM_hit             : STD_LOGIC;
   SIGNAL MEM_isIndLoad       : std_logic;
   SIGNAL MWriteH_l           : std_logic;
   SIGNAL MWriteL_l           : std_logic;
   SIGNAL N                   : std_logic;
   SIGNAL O                   : std_logic;
   SIGNAL P                   : std_logic;
   SIGNAL RESET_L             : std_logic;
   SIGNAL WB_ALUout           : LC3b_word;
   SIGNAL WB_BTBPC            : LC3b_word;
   SIGNAL WB_BTBpredict       : STD_LOGIC;
   SIGNAL WB_BranchDetected   : STD_LOGIC;
   SIGNAL WB_CW               : LC3b_ControlWord;
   SIGNAL WB_DR               : LC3b_reg;
   SIGNAL WB_Dest             : LC3b_reg;
   SIGNAL WB_FORWARDTHIS      : LC3b_word;
   SIGNAL WB_IW               : LC3b_word;
   SIGNAL WB_LoadReg          : std_logic;
   SIGNAL WB_Memout           : LC3b_word;
   SIGNAL WB_PC               : LC3b_word;
   SIGNAL WB_PCAddout         : LC3b_word;
   SIGNAL WB_PCPlus2          : LC3b_word;
   SIGNAL WB_RFInputMuxSel    : std_logic;
   SIGNAL WB_SR1              : LC3b_reg;
   SIGNAL WB_SR2              : LC3b_reg;
   SIGNAL WB_WBMuxOut         : LC3b_WORD;
   SIGNAL WB_addNOPs          : std_logic;
   SIGNAL WB_enBubble         : std_logic;
   SIGNAL WB_hit              : STD_LOGIC;
   SIGNAL X16bout             : LC3b_word;
   SIGNAL Z                   : std_logic;
   SIGNAL addNOPSIDEX         : std_logic;
   SIGNAL addNOPSMEMWB        : std_logic;
   SIGNAL addNOPs_l           : std_logic;
   SIGNAL address             : LC3b_word;
   SIGNAL bubble_l_nops       : std_logic;
   SIGNAL datain              : LC3b_Oword;
   SIGNAL dataout             : LC3b_Oword;
   SIGNAL en_L2               : std_logic;
   SIGNAL forwardBTBLoad      : std_logic;
   SIGNAL forwardLoad         : std_logic;
   --    count     : OUT std_logic_vector(WIDTH-1 downto 0)
   SIGNAL icount              : std_logic_vector(31 DOWNTO 0);
   SIGNAL indLoad             : std_logic;
   SIGNAL l2address           : LC3b_word;
   SIGNAL l2dataIn            : LC3b_Oword;
   SIGNAL l2dataOut           : LC3b_oword;
   SIGNAL l2mread_l           : std_logic;
   SIGNAL l2mwrite_l          : std_logic;
   SIGNAL l2pmaddress         : LC3b_word;
   SIGNAL l2pmdataIn          : LC3b_Oword;
   SIGNAL l2pmdataOut         : LC3b_Oword;
   SIGNAL l2pmread_l          : std_logic;
   SIGNAL l2pmresp_h          : std_logic;
   SIGNAL l2pmwrite_l         : std_logic;
   SIGNAL l2resp_h            : std_logic;
   SIGNAL loadBTB             : std_logic;
   SIGNAL loadPC              : std_logic;
   SIGNAL memBR_l             : std_logic;
   SIGNAL memLoad             : STD_LOGIC;
   SIGNAL mem_bubble_l_nops   : std_logic;
   SIGNAL mispredict_h        : std_logic;
   SIGNAL mispredict_l        : std_logic;
   SIGNAL mread_l             : std_logic;
   SIGNAL mresp_h             : std_logic;
   SIGNAL mwrite_l            : std_logic;
   SIGNAL normalPCLoad        : std_logic;
   SIGNAL notMEM_isIndLoad    : std_logic;
   SIGNAL one                 : std_logic;
   SIGNAL orphanInd_l         : std_logic;
   SIGNAL pmaddress           : LC3b_word;
   SIGNAL pmdatain            : LC3b_Oword;
   SIGNAL pmdataout           : LC3b_Oword;
   SIGNAL pmread_l            : std_logic;
   SIGNAL pmresp_h            : std_logic;
   SIGNAL pmwrite_l           : std_logic;
   SIGNAL pre_ExtPC           : LC3b_word;
   SIGNAL specialBubble1_l    : std_logic;
   SIGNAL specialStall_l      : std_logic;
   SIGNAL stallLoad           : std_logic;
   SIGNAL zero                : std_logic;


   -- Component Declarations
   COMPONENT BitAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNAND2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOR2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitNOT1
   PORT (
      I : IN     std_logic ;
      O : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT BitOR2
   PORT (
      I0 : IN     std_logic ;
      I1 : IN     std_logic ;
      O  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT CLKgen
   PORT (
      clk : INOUT  std_logic  := '0'
   );
   END COMPONENT;
   COMPONENT Cache_Arbiter
   PORT (
      DATAIN     : IN     LC3b_oword ;
      D_ADDRESS  : IN     LC3b_word ;
      D_DATAOUT  : IN     LC3b_oword ;
      D_MREAD_L  : IN     std_logic ;
      D_MWRITE_L : IN     std_logic ;
      I_ADDRESS  : IN     LC3b_word ;
      I_MREAD_L  : IN     std_logic ;
      MRESP_H    : IN     std_logic ;
      clk        : IN     std_logic ;
      reset_l    : IN     std_logic ;
      ADDRESS    : OUT    LC3b_word ;
      DATAOUT    : OUT    LC3b_Oword ;
      D_DATAIN   : OUT    LC3b_Oword ;
      D_MRESP_H  : OUT    std_logic ;
      I_DATAIN   : OUT    LC3b_Oword ;
      I_MRESP_H  : OUT    std_logic ;
      MREAD_L    : OUT    std_logic ;
      MWRITE_L   : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT Cache_L1
   PORT (
      ADDRESS   : IN     LC3b_word ;
      DATAOUT   : IN     LC3b_word ;
      MREAD_L   : IN     std_logic ;
      MWRITEH_L : IN     std_logic ;
      MWRITEL_L : IN     std_logic ;
      clk       : IN     std_logic ;
      pmdatain  : IN     LC3b_Oword ;
      pmresp_h  : IN     std_logic ;
      reset_l   : IN     std_logic ;
      DATAIN    : OUT    LC3b_word ;
      MRESP_H   : OUT    std_logic ;
      pmaddress : OUT    LC3b_word ;
      pmdataout : OUT    LC3b_Oword ;
      pmread_l  : OUT    std_logic ;
      pmwrite_l : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT EX_MEM
   PORT (
      RESET_L      : IN     std_logic ;
      bubble       : IN     std_logic ;
      clk          : IN     std_logic ;
      i_BTBPC      : IN     LC3b_word ;
      i_BTBhit     : IN     std_logic ;
      i_BTBpredict : IN     std_logic ;
      i_CW         : IN     LC3b_ControlWord ;
      i_DR         : IN     LC3b_reg ;
      i_Exout      : IN     LC3b_word ;
      i_IW         : IN     LC3b_word ;
      i_PC         : IN     LC3b_word ;
      i_PCAddOut   : IN     LC3b_word ;
      i_RFb        : IN     LC3b_word ;
      i_SR1        : IN     LC3b_reg ;
      i_SR2        : IN     LC3b_reg ;
      load         : IN     std_logic ;
      o_BTBPC      : OUT    LC3b_word ;
      o_BTBhit     : OUT    STD_LOGIC ;
      o_BTBpredict : OUT    STD_LOGIC ;
      o_CW         : OUT    LC3b_ControlWord ;
      o_DR         : OUT    LC3b_reg ;
      o_Exout      : OUT    LC3b_word ;
      o_IW         : OUT    LC3b_word ;
      o_PC         : OUT    LC3b_word ;
      o_PCAddOut   : OUT    LC3b_word ;
      o_RFb        : OUT    LC3b_word ;
      o_SR1        : OUT    LC3b_reg ;
      o_SR2        : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT ID_EX
   PORT (
      bubble       : IN     std_logic ;
      clk          : IN     std_logic ;
      i_ALUa       : IN     LC3b_word ;
      i_ALUb       : IN     LC3b_word ;
      i_BTBPC      : IN     LC3b_word ;
      i_BTBhit     : IN     std_logic ;
      i_BTBpredict : IN     std_logic ;
      i_CW         : IN     LC3b_ControlWord ;
      i_DR         : IN     LC3b_reg ;
      i_IW         : IN     LC3b_word ;
      i_PC         : IN     LC3b_word ;
      i_PCAddOut   : IN     LC3b_word ;
      i_RFb        : IN     LC3b_word ;
      i_SR1        : IN     LC3b_reg ;
      i_SR2        : IN     LC3b_reg ;
      load         : IN     std_logic ;
      reset_l      : IN     std_logic ;
      o_ALUa       : OUT    LC3b_word ;
      o_ALUb       : OUT    LC3b_word ;
      o_BTBPC      : OUT    LC3b_word ;
      o_BTBhit     : OUT    STD_LOGIC ;
      o_BTBpredict : OUT    STD_LOGIC ;
      o_CW         : OUT    LC3b_ControlWord ;
      o_DR         : OUT    LC3b_reg ;
      o_IW         : OUT    LC3b_word ;
      o_PC         : OUT    LC3b_word ;
      o_PCAddOut   : OUT    LC3b_word ;
      o_RFb        : OUT    LC3b_word ;
      o_SR1        : OUT    LC3b_reg ;
      o_SR2        : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT IF_ID
   PORT (
      bubble       : IN     std_logic ;
      clk          : IN     std_logic ;
      i_BTBPC      : IN     LC3b_word ;
      i_BTBhit     : IN     std_logic ;
      i_BTBpredict : IN     std_logic ;
      i_IW         : IN     LC3b_word ;
      i_PC         : IN     LC3b_word ;
      i_PCPlus2    : IN     LC3b_word ;
      load         : IN     std_logic ;
      reset_l      : IN     std_logic ;
      o_BTBPC      : OUT    LC3b_word ;
      o_BTBhit     : OUT    STD_LOGIC ;
      o_BTBpredict : OUT    STD_LOGIC ;
      o_IW         : OUT    LC3b_word ;
      o_PC         : OUT    LC3b_word ;
      o_PCPlus2    : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT InstCount
   PORT (
      reset_l : IN     std_logic ;
      PC      : IN     LC3b_word ;
      MP      : IN     std_logic ;
      --    count     : OUT std_logic_vector(WIDTH-1 downto 0)
      count   : OUT    std_logic_vector (31 DOWNTO 0)
   );
   END COMPONENT;
   COMPONENT L2_Datapath
   PORT (
      address   : IN     LC3b_word ;
      clk       : IN     std_logic ;
      dataIn    : IN     LC3b_Oword ;
      mread_l   : IN     std_logic ;
      mwrite_l  : IN     std_logic ;
      pmdataIn  : IN     LC3b_Oword ;
      pmresp_h  : IN     std_logic ;
      reset_l   : IN     std_logic ;
      dataOut   : OUT    LC3b_oword ;
      pmaddress : OUT    LC3b_word ;
      pmdataOut : OUT    LC3b_Oword ;
      pmread_l  : OUT    std_logic ;
      pmwrite_l : OUT    std_logic ;
      resp_h    : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT MEM_WB
   PORT (
      bubble       : IN     std_logic ;
      clk          : IN     STD_LOGIC ;
      i_BTBPC      : IN     LC3b_word ;
      i_BTBhit     : IN     std_logic ;
      i_BTBpredict : IN     std_logic ;
      i_CW         : IN     LC3b_ControlWord ;
      i_DR         : IN     LC3b_reg ;
      i_Exout      : IN     LC3b_word ;
      i_IW         : IN     LC3b_word ;
      i_Memout     : IN     LC3b_word ;
      i_PC         : IN     LC3b_word ;
      i_PCAddOut   : IN     LC3b_word ;
      i_SR1        : IN     LC3b_reg ;
      i_SR2        : IN     LC3b_reg ;
      load         : IN     STD_LOGIC ;
      reset_l      : IN     std_logic ;
      o_BTBPC      : OUT    LC3b_word ;
      o_BTBhit     : OUT    STD_LOGIC ;
      o_BTBpredict : OUT    STD_LOGIC ;
      o_CW         : OUT    LC3b_ControlWord ;
      o_DR         : OUT    LC3b_reg ;
      o_Exout      : OUT    LC3b_word ;
      o_IW         : OUT    LC3b_word ;
      o_Memout     : OUT    LC3b_word ;
      o_PC         : OUT    LC3b_word ;
      o_PCAddOut   : OUT    LC3b_word ;
      o_SR1        : OUT    LC3b_reg ;
      o_SR2        : OUT    LC3b_reg 
   );
   END COMPONENT;
   COMPONENT Physical_Memory
   PORT (
      clk       : IN     std_logic ;
      reset_l   : IN     std_logic ;
      pmaddress : IN     LC3b_word ;
      pmdataout : IN     LC3b_Oword ;
      pmread_l  : IN     std_logic ;
      pmwrite_l : IN     std_logic ;
      pmdatain  : OUT    LC3b_Oword ;
      pmresp_h  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT STAGE_DECODE
   PORT (
      IW            : IN     LC3b_word ;
      PCPlus2out    : IN     LC3b_word ;
      PCout         : IN     LC3b_word ;
      RFInputMuxSel : IN     std_logic ;
      WBMuxout      : IN     LC3b_word ;
      WB_Dest       : IN     LC3b_reg ;
      WB_LoadReg    : IN     std_logic ;
      clk           : IN     std_logic ;
      mispredict_l  : IN     std_logic ;
      reset_l       : IN     std_logic ;
      stallInd_L    : IN     std_logic ;
      ALUA          : OUT    LC3b_word ;
      ALUB          : OUT    LC3b_word ;
      CW            : OUT    LC3b_ControlWord ;
      DR            : OUT    LC3b_reg ;
      ID_isBR       : OUT    std_logic ;
      ID_isLD       : OUT    std_logic ;
      ID_isST       : OUT    std_logic ;
      IDaddNOPs     : OUT    std_logic ;
      Ind_stall_L   : OUT    std_logic ;
      PCAddout      : OUT    LC3b_word ;
      RFB           : OUT    LC3b_word ;
      RFInMuxout    : OUT    LC3b_word ;
      SR1           : OUT    LC3b_reg ;
      SR2           : OUT    LC3b_reg ;
      enBubble      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT STAGE_EXE
   PORT (
      ALUa          : IN     LC3b_word ;
      ALUb          : IN     LC3b_word ;
      CW            : IN     LC3b_ControlWord ;
      DR            : IN     LC3b_reg ;
      FWD_MEM       : IN     LC3b_word ;
      FWD_SR1MuxSel : IN     LC3b_4mux_sel ;
      FWD_SR2MuxSel : IN     LC3b_4mux_sel ;
      FWD_WB        : IN     LC3b_word ;
      IW            : IN     LC3b_word ;
      RFBin         : IN     LC3b_word ;
      SR1           : IN     LC3b_reg ;
      SR2           : IN     LC3b_reg ;
      EX_addNOPs    : OUT    std_logic ;
      EX_isInd      : OUT    std_logic ;
      Exout         : OUT    LC3b_word ;
      RFBout        : OUT    LC3b_word ;
      enBubble      : OUT    std_logic ;
      isBR          : OUT    std_logic ;
      isLD          : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT STAGE_FETCH
   PORT (
      ExtPC             : IN     LC3b_word ;
      PCMuxSel          : IN     std_logic ;
      PCTargetin        : IN     LC3b_word ;
      WBPCindex         : IN     LC3b_word ;
      clk               : IN     std_logic ;
      isUnconditionalIn : IN     std_logic ;
      loadBTB           : IN     std_logic ;
      loadPC            : IN     std_logic ;
      mispredict_l      : IN     std_logic ;
      predictionIn      : IN     std_logic ;
      reset_l           : IN     std_logic ;
      PCPlus2out        : OUT    LC3b_word ;
      PCTargetout       : OUT    LC3b_word ;
      PCout             : OUT    LC3b_word ;
      hit               : OUT    std_logic ;
      predictionout     : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT STAGE_MEM
   PORT (
      CW            : IN     LC3b_ControlWord ;
      DR            : IN     LC3b_reg ;
      D_DATAIN      : IN     LC3b_word ;
      Exout         : IN     LC3b_word ;
      IW            : IN     LC3b_word ;
      RFBout        : IN     LC3b_word ;
      SR1           : IN     LC3b_reg ;
      SR2           : IN     LC3b_reg ;
      WB_Memout     : IN     LC3b_word ;
      D_ADDRESS     : OUT    LC3b_word ;
      D_DATAOUT     : OUT    LC3b_word ;
      LoadReg       : OUT    std_logic ;
      MEM_addNOPs   : OUT    std_logic ;
      MEM_isIndLoad : OUT    std_logic ;
      MEMout        : OUT    LC3b_word ;
      MRead_l       : OUT    std_logic ;
      MWriteH_l     : OUT    std_logic ;
      MWriteL_l     : OUT    std_logic ;
      enBubble      : OUT    std_logic ;
      isBR          : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT STAGE_WB
   PORT (
      ALUout              : IN     LC3b_WORD ;
      BTBPC               : IN     LC3b_word ;
      BTBPredict          : IN     std_logic ;
      BTBhit              : IN     std_logic ;
      CW                  : IN     LC3b_ControlWord ;
      DR                  : IN     LC3b_reg ;
      IW                  : IN     LC3b_word ;
      MEM                 : IN     LC3b_WORD ;
      PC                  : IN     LC3b_word ;
      PCAddout            : IN     LC3b_word ;
      RESET_L             : IN     std_logic ;
      SR1                 : IN     LC3b_reg ;
      SR2                 : IN     LC3b_reg ;
      clk                 : IN     std_logic ;
      BTBPredictout       : OUT    std_logic ;
      BTBUnconditionalOut : OUT    std_logic ;
      BranchDetected      : OUT    std_logic ;
      CC                  : OUT    LC3b_CC ;
      Dest                : OUT    LC3b_reg ;
      ExtPC               : OUT    LC3b_word ;
      LoadReg             : OUT    std_logic ;
      N                   : OUT    std_logic ;
      P                   : OUT    std_logic ;
      PCPlus2out          : OUT    LC3b_word ;
      RFInputMuxSel       : OUT    std_logic ;
      WBMuxout            : OUT    LC3b_WORD ;
      WB_addNOPs          : OUT    std_logic ;
      Z                   : OUT    std_logic ;
      enBubble            : OUT    std_logic ;
      loadBTB             : OUT    std_logic ;
      mispredict_h        : OUT    std_logic ;
      pre_ExtPC           : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT StallUnit
   PORT (
      MREAD_L   : IN     STD_LOGIC ;
      MRESP_H   : IN     std_logic ;
      MWRITEH_L : IN     STD_LOGIC ;
      MWRITEL_L : IN     STD_LOGIC ;
      Load      : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT X16b
   PORT (
      X16bout : OUT    LC3b_word 
   );
   END COMPONENT;
   COMPONENT const0
   PORT (
      zero : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT const1
   PORT (
      one : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT enL2Unit
   PORT (
      en_L2       : IN     std_logic ;
      --Arbiter
      mread_l     : IN     std_logic ;
      mwrite_l    : IN     std_logic ;
      address     : IN     LC3b_word ;
      dataout     : IN     LC3b_Oword ;
      datain      : OUT    LC3b_Oword ;
      mresp_h     : OUT    std_logic ;
      --Physical Memory
      pmread_l    : OUT    std_logic ;
      pmwrite_l   : OUT    std_logic ;
      pmaddress   : OUT    LC3b_word ;
      pmdataout   : OUT    LC3b_Oword ;
      pmdatain    : IN     LC3b_Oword ;
      pmresp_h    : IN     std_logic ;
      --L2 cache
      l2mread_l   : OUT    std_logic ;
      l2mwrite_l  : OUT    std_logic ;
      l2address   : OUT    LC3b_word ;
      l2dataIn    : OUT    LC3b_Oword ;
      l2dataOut   : IN     LC3b_Oword ;
      l2resp_h    : IN     std_logic ;
      l2pmread_l  : IN     std_logic ;
      l2pmwrite_l : IN     std_logic ;
      l2pmaddress : IN     LC3b_word ;
      l2pmdataOut : IN     LC3b_Oword ;
      l2pmdataIn  : OUT    LC3b_Oword ;
      l2pmresp_h  : OUT    std_logic 
   );
   END COMPONENT;
   COMPONENT fwdUnit
   PORT (
      EX_DR        : IN     LC3b_reg ;
      EX_SR1       : IN     LC3b_reg ;
      EX_SR2       : IN     LC3b_reg ;
      EX_isLD      : IN     std_logic ;
      ID_SR1       : IN     LC3b_reg ;
      ID_SR2       : IN     LC3b_reg ;
      MEM_DR       : IN     LC3b_reg ;
      MEM_WriteReg : IN     std_logic ;
      WB_DR        : IN     LC3b_reg ;
      WB_WriteReg  : IN     std_logic ;
      EX_SR1_SEL   : OUT    LC3b_4MUX_SEL ;
      EX_SR2_SEL   : OUT    LC3B_4MUX_SEL ;
      LD_USE_L     : OUT    std_logic 
   );
   END COMPONENT;

   -- Optional embedded configurations
   -- pragma synthesis_off
   FOR ALL : BitAND2 USE ENTITY ece411.BitAND2;
   FOR ALL : BitNAND2 USE ENTITY ece411.BitNAND2;
   FOR ALL : BitNOR2 USE ENTITY ece411.BitNOR2;
   FOR ALL : BitNOT1 USE ENTITY ece411.BitNOT1;
   FOR ALL : BitOR2 USE ENTITY ece411.BitOR2;
   FOR ALL : CLKgen USE ENTITY ece411.CLKgen;
   FOR ALL : Cache_Arbiter USE ENTITY ece411.Cache_Arbiter;
   FOR ALL : Cache_L1 USE ENTITY ece411.Cache_L1;
   FOR ALL : EX_MEM USE ENTITY ece411.EX_MEM;
   FOR ALL : ID_EX USE ENTITY ece411.ID_EX;
   FOR ALL : IF_ID USE ENTITY ece411.IF_ID;
   FOR ALL : InstCount USE ENTITY ece411.InstCount;
   FOR ALL : L2_Datapath USE ENTITY ece411.L2_Datapath;
   FOR ALL : MEM_WB USE ENTITY ece411.MEM_WB;
   FOR ALL : Physical_Memory USE ENTITY ece411.Physical_Memory;
   FOR ALL : STAGE_DECODE USE ENTITY ece411.STAGE_DECODE;
   FOR ALL : STAGE_EXE USE ENTITY ece411.STAGE_EXE;
   FOR ALL : STAGE_FETCH USE ENTITY ece411.STAGE_FETCH;
   FOR ALL : STAGE_MEM USE ENTITY ece411.STAGE_MEM;
   FOR ALL : STAGE_WB USE ENTITY ece411.STAGE_WB;
   FOR ALL : StallUnit USE ENTITY ece411.StallUnit;
   FOR ALL : X16b USE ENTITY ece411.X16b;
   FOR ALL : const0 USE ENTITY ece411.const0;
   FOR ALL : const1 USE ENTITY ece411.const1;
   FOR ALL : enL2Unit USE ENTITY ece411.enL2Unit;
   FOR ALL : fwdUnit USE ENTITY ece411.fwdUnit;
   -- pragma synthesis_on


BEGIN
   -- Architecture concurrent statements
   -- HDL Embedded Text Block 1 PCAddrBlock
   -- I_ADDRESS = IF_PC
   I_ADDRESS <= IF_PC;                                        

   -- HDL Embedded Text Block 2 IFetchBlock
   -- I_MREAD_L = 0
   I_MREAD_L <= '0';

   -- HDL Embedded Text Block 3 IDataBlock
   -- IF_IW = I_DATAIN
   IF_IW <= I_DATAIN;                                        

   -- HDL Embedded Text Block 4 eb1
   -- enable/disable L2 cache
   en_L2 <= '1';         

   -- HDL Embedded Text Block 5 PCAddrBlock2
   -- DMWRITEL_L = MWRITE_L
   D_MWRITEL_L <= MWriteL_l ;                                        

   -- HDL Embedded Text Block 6 PCAddrBlock3
   -- DMWRITEH_L = MWRITE_L
   D_MWRITEH_L <= MWriteH_l ;                                        


   -- Instance port mappings.
   IGNOREDFORNOW : BitAND2
      PORT MAP (
         I0 => forwardBTBLoad,
         I1 => specialBubble1_l,
         O  => specialStall_l
      );
   NOPSEX : BitAND2
      PORT MAP (
         I0 => EX_bubble_l,
         I1 => addNOPs_l,
         O  => EX_bubble_l_nops
      );
   NOPSIDWB : BitAND2
      PORT MAP (
         I0 => mispredict_l,
         I1 => addNOPs_l,
         O  => bubble_l_nops
      );
   NOPSMEM : BitAND2
      PORT MAP (
         I0 => MEM_bubble_l,
         I1 => addNOPs_l,
         O  => mem_bubble_l_nops
      );
   SpecialBubbleAND1 : BitAND2
      PORT MAP (
         I0 => LD_USE_L,
         I1 => memBR_l,
         O  => specialBubble1_l
      );
   SpecialBubbleAND2 : BitAND2
      PORT MAP (
         I0 => specialBubble1_l,
         I1 => mispredict_l,
         O  => EX_bubble_l
      );
   SpecialBubbleAND3 : BitAND2
      PORT MAP (
         I0 => mispredict_l,
         I1 => orphanInd_l,
         O  => MEM_bubble_l
      );
   StallAND : BitAND2
      PORT MAP (
         I0 => IFload,
         I1 => memLoad,
         O  => stallLoad
      );
   StallAND2 : BitAND2
      PORT MAP (
         I0 => LD_USE_L,
         I1 => stallLoad,
         O  => forwardLoad
      );
   StallAND3 : BitAND2
      PORT MAP (
         I0 => memBR_l,
         I1 => forwardLoad,
         O  => forwardBTBLoad
      );
   StallAND4 : BitAND2
      PORT MAP (
         I0 => forwardBTBLoad,
         I1 => Ind_stall_L,
         O  => indLoad
      );
   U_1 : BitAND2
      PORT MAP (
         I0 => WB_BranchDetected,
         I1 => stallLoad,
         O  => O
      );
   normalPCloadAND : BitAND2
      PORT MAP (
         I0 => indLoad,
         I1 => addNOPs_l,
         O  => normalPCLoad
      );
   MEMBRNAND : BitNAND2
      PORT MAP (
         I0 => EX_enBubble,
         I1 => ID_isMEM,
         O  => memBR_l
      );
   OrphanIndNAND : BitNAND2
      PORT MAP (
         I0 => EX_isInd,
         I1 => notMEM_isIndLoad,
         O  => orphanInd_l
      );
   addNOPsNOR : BitNOR2
      PORT MAP (
         I0 => addNOPSIDEX,
         I1 => addNOPSMEMWB,
         O  => addNOPs_l
      );
   EXIndLoadNOT : BitNOT1
      PORT MAP (
         I => MEM_isIndLoad,
         O => notMEM_isIndLoad
      );
   mispredictNOT : BitNOT1
      PORT MAP (
         I => mispredict_h,
         O => mispredict_l
      );
   IDMEMOR : BitOR2
      PORT MAP (
         I0 => ID_isST,
         I1 => ID_isLD,
         O  => ID_isMEM
      );
   IDMEMOR1 : BitOR2
      PORT MAP (
         I0 => normalPCLoad,
         I1 => O,
         O  => loadPC
      );
   IFIDLoad : BitOR2
      PORT MAP (
         I0 => indLoad,
         I1 => mispredict_h,
         O  => IF_IDLoad
      );
   addNOPsOR : BitOR2
      PORT MAP (
         I0 => ID_addNOPs,
         I1 => EX_addNOPs,
         O  => addNOPSIDEX
      );
   addNOPsOR2 : BitOR2
      PORT MAP (
         I0 => MEM_addNOPs,
         I1 => WB_addNOPs,
         O  => addNOPSMEMWB
      );
   U_0 : CLKgen
      PORT MAP (
         clk => CLK
      );
   theArbiter : Cache_Arbiter
      PORT MAP (
         DATAIN     => datain,
         D_ADDRESS  => D_pmaddress,
         D_DATAOUT  => D_pmdataout,
         D_MREAD_L  => D_pmread_l,
         D_MWRITE_L => D_pmwrite_l,
         I_ADDRESS  => I_pmaddress,
         I_MREAD_L  => I_pmread_l,
         MRESP_H    => mresp_h,
         clk        => CLK,
         reset_l    => RESET_L,
         ADDRESS    => address,
         DATAOUT    => dataout,
         D_DATAIN   => D_pmdatain,
         D_MRESP_H  => D_pmresp_h,
         I_DATAIN   => I_pmdatain,
         I_MRESP_H  => I_pmresp_h,
         MREAD_L    => mread_l,
         MWRITE_L   => mwrite_l
      );
   D_Cache : Cache_L1
      PORT MAP (
         ADDRESS   => D_ADDRESS,
         DATAOUT   => D_DATAOUT,
         MREAD_L   => D_MREAD_L,
         MWRITEH_L => D_MWRITEH_L,
         MWRITEL_L => D_MWRITEL_L,
         clk       => CLK,
         pmdatain  => D_pmdatain,
         pmresp_h  => D_pmresp_h,
         reset_l   => RESET_L,
         DATAIN    => D_DATAIN,
         MRESP_H   => D_MRESP_H,
         pmaddress => D_pmaddress,
         pmdataout => D_pmdataout,
         pmread_l  => D_pmread_l,
         pmwrite_l => D_pmwrite_l
      );
   I_Cache : Cache_L1
      PORT MAP (
         ADDRESS   => I_ADDRESS,
         DATAOUT   => X16bout,
         MREAD_L   => I_MREAD_L,
         MWRITEH_L => one,
         MWRITEL_L => one,
         clk       => CLK,
         pmdatain  => I_pmdatain,
         pmresp_h  => I_pmresp_h,
         reset_l   => RESET_L,
         DATAIN    => I_DATAIN,
         MRESP_H   => I_MRESP_H,
         pmaddress => I_pmaddress,
         pmdataout => OPEN,
         pmread_l  => I_pmread_l,
         pmwrite_l => OPEN
      );
   theEX_MEM : EX_MEM
      PORT MAP (
         bubble       => MEM_bubble_l,
         clk          => CLK,
         i_BTBPC      => EX_BTBPC,
         i_BTBhit     => EX_hit,
         i_BTBpredict => EX_BTBpredict,
         i_CW         => EX_CW,
         i_DR         => EX_DR,
         i_Exout      => Exout,
         i_IW         => EX_IW,
         i_PC         => EX_PC,
         i_PCAddOut   => EX_PCAddOut,
         i_RFb        => EX_RFBout,
         i_SR1        => EX_SR1,
         i_SR2        => EX_SR2,
         load         => stallLoad,
         reset_l      => RESET_L,
         o_BTBPC      => MEM_BTBPC,
         o_BTBhit     => MEM_hit,
         o_BTBpredict => MEM_BTBpredict,
         o_CW         => MEM_CW,
         o_DR         => MEM_DR,
         o_Exout      => MEM_Exout,
         o_IW         => MEM_IW,
         o_PC         => MEM_PC,
         o_PCAddOut   => MEM_PCAddout,
         o_RFb        => MEM_RFb,
         o_SR1        => MEM_SR1,
         o_SR2        => MEM_SR2
      );
   theID_EX : ID_EX
      PORT MAP (
         bubble       => EX_bubble_l,
         clk          => CLK,
         i_ALUa       => ID_ALUA,
         i_ALUb       => ID_ALUB,
         i_BTBPC      => ID_BTBPC,
         i_BTBhit     => ID_hit,
         i_BTBpredict => ID_BTBpredict,
         i_CW         => ID_CW,
         i_DR         => ID_DR,
         i_IW         => ID_IW,
         i_PC         => ID_PC,
         i_PCAddOut   => ID_PCAddout,
         i_RFb        => ID_RFB,
         i_SR1        => ID_SR1,
         i_SR2        => ID_SR2,
         load         => stallLoad,
         reset_l      => RESET_L,
         o_ALUa       => EX_ALUa,
         o_ALUb       => EX_ALUb,
         o_BTBPC      => EX_BTBPC,
         o_BTBhit     => EX_hit,
         o_BTBpredict => EX_BTBpredict,
         o_CW         => EX_CW,
         o_DR         => EX_DR,
         o_IW         => EX_IW,
         o_PC         => EX_PC,
         o_PCAddOut   => EX_PCAddOut,
         o_RFb        => EX_RFbin,
         o_SR1        => EX_SR1,
         o_SR2        => EX_SR2
      );
   theIF_ID : IF_ID
      PORT MAP (
         bubble       => bubble_l_nops,
         clk          => CLK,
         i_BTBPC      => IF_BTBPC,
         i_BTBhit     => IF_hit,
         i_BTBpredict => IF_BTBPredict,
         i_IW         => IF_IW,
         i_PC         => IF_PC,
         i_PCPlus2    => IF_PCPlus2,
         load         => IF_IDLoad,
         reset_l      => RESET_L,
         o_BTBPC      => ID_BTBPC,
         o_BTBhit     => ID_hit,
         o_BTBpredict => ID_BTBpredict,
         o_IW         => ID_IW,
         o_PC         => ID_PC,
         o_PCPlus2    => ID_PCPlus2
      );
   IC : InstCount
      PORT MAP (
         reset_l => RESET_L,
         PC      => IF_PC,
         MP      => mispredict_h,
         count   => icount
      );
   theL2Cache : L2_Datapath
      PORT MAP (
         address   => l2address,
         clk       => CLK,
         dataIn    => l2dataIn,
         mread_l   => l2mread_l,
         mwrite_l  => l2mwrite_l,
         pmdataIn  => l2pmdataIn,
         pmresp_h  => l2pmresp_h,
         reset_l   => RESET_L,
         dataOut   => l2dataOut,
         pmaddress => l2pmaddress,
         pmdataOut => l2pmdataOut,
         pmread_l  => l2pmread_l,
         pmwrite_l => l2pmwrite_l,
         resp_h    => l2resp_h
      );
   theMEM_WB : MEM_WB
      PORT MAP (
         bubble       => mispredict_l,
         clk          => CLK,
         i_BTBPC      => MEM_BTBPC,
         i_BTBhit     => MEM_hit,
         i_BTBpredict => MEM_BTBpredict,
         i_CW         => MEM_CW,
         i_DR         => MEM_DR,
         i_Exout      => MEM_Exout,
         i_IW         => MEM_IW,
         i_Memout     => MEM_MEMout,
         i_PC         => MEM_PC,
         i_PCAddOut   => MEM_PCAddout,
         i_SR1        => MEM_SR1,
         i_SR2        => MEM_SR2,
         load         => stallLoad,
         reset_l      => RESET_L,
         o_BTBPC      => WB_BTBPC,
         o_BTBhit     => WB_hit,
         o_BTBpredict => WB_BTBpredict,
         o_CW         => WB_CW,
         o_DR         => WB_DR,
         o_Exout      => WB_ALUout,
         o_IW         => WB_IW,
         o_Memout     => WB_Memout,
         o_PC         => WB_PC,
         o_PCAddOut   => WB_PCAddout,
         o_SR1        => WB_SR1,
         o_SR2        => WB_SR2
      );
   DRAM : Physical_Memory
      PORT MAP (
         clk       => CLK,
         reset_l   => RESET_L,
         pmaddress => pmaddress,
         pmdataout => pmdataout,
         pmread_l  => pmread_l,
         pmwrite_l => pmwrite_l,
         pmdatain  => pmdatain,
         pmresp_h  => pmresp_h
      );
   theDecode : STAGE_DECODE
      PORT MAP (
         IW            => ID_IW,
         PCPlus2out    => ID_PCPlus2,
         PCout         => WB_PCPlus2,
         RFInputMuxSel => WB_RFInputMuxSel,
         WBMuxout      => WB_WBMuxOut,
         WB_Dest       => WB_Dest,
         WB_LoadReg    => WB_LoadReg,
         clk           => CLK,
         mispredict_l  => mispredict_l,
         reset_l       => RESET_L,
         stallInd_L    => forwardBTBLoad,
         ALUA          => ID_ALUA,
         ALUB          => ID_ALUB,
         CW            => ID_CW,
         DR            => ID_DR,
         ID_isBR       => OPEN,
         ID_isLD       => ID_isLD,
         ID_isST       => ID_isST,
         IDaddNOPs     => ID_addNOPs,
         Ind_stall_L   => Ind_stall_L,
         PCAddout      => ID_PCAddout,
         RFB           => ID_RFB,
         RFInMuxout    => WB_FORWARDTHIS,
         SR1           => ID_SR1,
         SR2           => ID_SR2,
         enBubble      => ID_enBubble
      );
   theEX : STAGE_EXE
      PORT MAP (
         ALUa          => EX_ALUa,
         ALUb          => EX_ALUb,
         CW            => EX_CW,
         DR            => EX_DR,
         FWD_MEM       => MEM_Exout,
         FWD_SR1MuxSel => FWD_SR1_SEL,
         FWD_SR2MuxSel => FWD_SR2_SEL,
         FWD_WB        => WB_FORWARDTHIS,
         IW            => EX_IW,
         RFBin         => EX_RFbin,
         SR1           => EX_SR1,
         SR2           => EX_SR2,
         EX_addNOPs    => EX_addNOPs,
         EX_isInd      => EX_isInd,
         Exout         => Exout,
         RFBout        => EX_RFBout,
         enBubble      => EX_enBubble,
         isBR          => OPEN,
         isLD          => EX_isLD
      );
   theFetch : STAGE_FETCH
      PORT MAP (
         ExtPC             => ExtPC,
         PCMuxSel          => WB_BranchDetected,
         PCTargetin        => pre_ExtPC,
         WBPCindex         => WB_PC,
         clk               => CLK,
         isUnconditionalIn => BTBUnconditionalout,
         loadBTB           => loadBTB,
         loadPC            => loadPC,
         mispredict_l      => mispredict_l,
         predictionIn      => BTBPredictout,
         reset_l           => RESET_L,
         PCPlus2out        => IF_PCPlus2,
         PCTargetout       => IF_BTBPC,
         PCout             => IF_PC,
         hit               => IF_hit,
         predictionout     => IF_BTBPredict
      );
   theMEM : STAGE_MEM
      PORT MAP (
         CW            => MEM_CW,
         DR            => MEM_DR,
         D_DATAIN      => D_DATAIN,
         Exout         => MEM_Exout,
         IW            => MEM_IW,
         RFBout        => MEM_RFb,
         SR1           => MEM_SR1,
         SR2           => MEM_SR2,
         WB_Memout     => WB_Memout,
         D_ADDRESS     => D_ADDRESS,
         D_DATAOUT     => D_DATAOUT,
         LoadReg       => MEM_LoadReg,
         MEM_addNOPs   => MEM_addNOPs,
         MEM_isIndLoad => MEM_isIndLoad,
         MEMout        => MEM_MEMout,
         MRead_l       => D_MREAD_L,
         MWriteH_l     => MWriteH_l,
         MWriteL_l     => MWriteL_l,
         enBubble      => MEM_enBubble,
         isBR          => OPEN
      );
   theWB : STAGE_WB
      PORT MAP (
         ALUout              => WB_ALUout,
         BTBPC               => WB_BTBPC,
         BTBPredict          => WB_BTBpredict,
         BTBhit              => WB_hit,
         CW                  => WB_CW,
         DR                  => WB_DR,
         IW                  => WB_IW,
         MEM                 => WB_Memout,
         PC                  => WB_PC,
         PCAddout            => WB_PCAddout,
         RESET_L             => RESET_L,
         SR1                 => WB_SR1,
         SR2                 => WB_SR2,
         clk                 => CLK,
         BTBPredictout       => BTBPredictout,
         BTBUnconditionalOut => BTBUnconditionalout,
         BranchDetected      => WB_BranchDetected,
         CC                  => CC,
         Dest                => WB_Dest,
         ExtPC               => ExtPC,
         LoadReg             => WB_LoadReg,
         N                   => N,
         P                   => P,
         PCPlus2out          => WB_PCPlus2,
         RFInputMuxSel       => WB_RFInputMuxSel,
         WBMuxout            => WB_WBMuxOut,
         WB_addNOPs          => WB_addNOPs,
         Z                   => Z,
         enBubble            => WB_enBubble,
         loadBTB             => loadBTB,
         mispredict_h        => mispredict_h,
         pre_ExtPC           => pre_ExtPC
      );
   IFStall : StallUnit
      PORT MAP (
         MREAD_L   => zero,
         MRESP_H   => I_MRESP_H,
         MWRITEH_L => one,
         MWRITEL_L => one,
         Load      => IFload
      );
   IFStall1 : StallUnit
      PORT MAP (
         MREAD_L   => D_MREAD_L,
         MRESP_H   => D_MRESP_H,
         MWRITEH_L => D_MWRITEL_L,
         MWRITEL_L => D_MWRITEH_L,
         Load      => memLoad
      );
   aX16b : X16b
      PORT MAP (
         X16bout => X16bout
      );
   aconst0 : const0
      PORT MAP (
         zero => zero
      );
   aconst1 : const1
      PORT MAP (
         one => one
      );
   aenL2Unit : enL2Unit
      PORT MAP (
         en_L2       => en_L2,
         mread_l     => mread_l,
         mwrite_l    => mwrite_l,
         address     => address,
         dataout     => dataout,
         datain      => datain,
         mresp_h     => mresp_h,
         pmread_l    => pmread_l,
         pmwrite_l   => pmwrite_l,
         pmaddress   => pmaddress,
         pmdataout   => pmdataout,
         pmdatain    => pmdatain,
         pmresp_h    => pmresp_h,
         l2mread_l   => l2mread_l,
         l2mwrite_l  => l2mwrite_l,
         l2address   => l2address,
         l2dataIn    => l2dataIn,
         l2dataOut   => l2dataOut,
         l2resp_h    => l2resp_h,
         l2pmread_l  => l2pmread_l,
         l2pmwrite_l => l2pmwrite_l,
         l2pmaddress => l2pmaddress,
         l2pmdataOut => l2pmdataOut,
         l2pmdataIn  => l2pmdataIn,
         l2pmresp_h  => l2pmresp_h
      );
   theFWDUnit : fwdUnit
      PORT MAP (
         EX_DR        => EX_DR,
         EX_SR1       => EX_SR1,
         EX_SR2       => EX_SR2,
         EX_isLD      => EX_isLD,
         ID_SR1       => ID_SR1,
         ID_SR2       => ID_SR2,
         MEM_DR       => MEM_DR,
         MEM_WriteReg => MEM_LoadReg,
         WB_DR        => WB_DR,
         WB_WriteReg  => WB_LoadReg,
         EX_SR1_SEL   => FWD_SR1_SEL,
         EX_SR2_SEL   => FWD_SR2_SEL,
         LD_USE_L     => LD_USE_L
      );

END struct;
